{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-stellar/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/fcircle.js","path":"js/plugins/fcircle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/friends.js","path":"js/plugins/friends.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/ghinfo.js","path":"js/plugins/ghinfo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/linkcard.js","path":"js/plugins/linkcard.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/sites.js","path":"js/plugins/sites.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/timeline.js","path":"js/plugins/timeline.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/Stellar/index.md","hash":"9dbea7ea8313a216e9c91f1884a5bbb639042494","modified":1667298579875},{"_id":"source/_posts/2022-07-03_简介.md","hash":"87655de4c2fd5289d2b4b31061580f7978763e12","modified":1666917669434},{"_id":"source/_posts/2022-07-06-C语言学习记录_day.md","hash":"9f0dc39cce0fbe67f1a0e35c2f8d972678fa9625","modified":1667293311075},{"_id":"source/.DS_Store","hash":"a9a90e5df3756c8614c00f4c634ba8befbe60452","modified":1667299658420},{"_id":"source/_posts/2022-10-19_学生成绩管理系统.md","hash":"89a75e8fd539b048c50adc4b3938cc9ed0d3e5d9","modified":1667293322874},{"_id":"source/_posts/2022-07-06_初识Linux .md","hash":"ccc5c2b96b033b93f8eb899e5af094010a530430","modified":1657101456000},{"_id":"source/_posts/2022-10-28_C语言笔记简化版.md","hash":"4b7d98644c06e75dea10d39c3f7382d9e063de68","modified":1667293292531},{"_id":"source/_data/widgets.yml","hash":"d2e251fa34ab5deac96fc59b79d8bd919000cf35","modified":1667299564167},{"_id":"source/_posts/2022-07-06_Linux常用命令.md","hash":"839eef504ce14c5b7d6df0d4c7c4d988e6534544","modified":1666954514796},{"_id":"source/_posts/2022_11_1_声明.md","hash":"65a61fb61b7a3c6f6a64708ff55964ea92f35c2e","modified":1667260028318},{"_id":"source/more/index.md","hash":"cb2db273b85a725ea63e7536cb19ddae79f5436e","modified":1667233059397},{"_id":"source/index/index.md","hash":"4f0d1018021680d6bcc56a068bf4729a7efc9e08","modified":1667299420451},{"_id":"source/notes/index.md","hash":"504bcc809361ae1f8533c418c70eb47488da4657","modified":1667233064927},{"_id":"source/post/index.md","hash":"4eb83e8ebc6a323db64e216d034d24f390dc4452","modified":1667233068319},{"_id":"source/wiki/index.md","hash":"23818050290eb99d39df1cd57c68afb213b07464","modified":1667232957774},{"_id":"node_modules/hexo-theme-stellar/package.json","hash":"6e0d33c12998e686764f839351212abbab9e1022","modified":1667231184404},{"_id":"node_modules/hexo-theme-stellar/LICENSE","hash":"7fdfdb5dbc7d672fa28a2a3c9efa03ff8df5917d","modified":1667231184363},{"_id":"node_modules/hexo-theme-stellar/README.md","hash":"37541a8c28ee6bb0906c225e0e41c31a1e73a086","modified":1667231184404},{"_id":"node_modules/hexo-theme-stellar/_config.yml","hash":"a085833bd7a6e7526d8ca07ba3cb32d31a4d50ff","modified":1667231184425},{"_id":"node_modules/hexo-theme-stellar/_data/widgets.yml","hash":"b27779e10db2680a4ba0cd2691e744ce70bf9ab0","modified":1667231184426},{"_id":"node_modules/hexo-theme-stellar/languages/en.yml","hash":"786f420ce5a904622177fbb4ceb3bcd21d010fe4","modified":1667231184426},{"_id":"node_modules/hexo-theme-stellar/_data/links.yml","hash":"692b4bc59b86ab3e8c73f90e9bf4291b25561337","modified":1667231184426},{"_id":"node_modules/hexo-theme-stellar/languages/zh-TW.yml","hash":"f4eb860539acc02a0934f790f61375537e5dd4a4","modified":1667231184427},{"_id":"node_modules/hexo-theme-stellar/languages/zh-CN.yml","hash":"67d18e4012aca45d8614d1d003fcc88093547145","modified":1667231184427},{"_id":"node_modules/hexo-theme-stellar/layout/404.ejs","hash":"de777c172dc35a27a09394d770f83c8c1e54a557","modified":1667231184364},{"_id":"node_modules/hexo-theme-stellar/layout/categories.ejs","hash":"ce50c1d35dd2f5dfe190b5d70755cdb43e26c522","modified":1667231184366},{"_id":"node_modules/hexo-theme-stellar/layout/archive.ejs","hash":"ef91a073521dab22fcd191b1970982e7a836d698","modified":1667231184364},{"_id":"node_modules/hexo-theme-stellar/layout/layout.ejs","hash":"6ea432c18cdc9d19433bd9bc70380cc58f42f20a","modified":1667231184376},{"_id":"node_modules/hexo-theme-stellar/layout/index.ejs","hash":"b349bb70bfc780e98bc334af9fe0419cd9047978","modified":1667231184372},{"_id":"node_modules/hexo-theme-stellar/layout/page.ejs","hash":"cd77248c07751b0bea92a52b2fab564415a58b93","modified":1667231184377},{"_id":"node_modules/hexo-theme-stellar/layout/mathjax.ejs","hash":"b43088ee89e5669e772cd464da2a89f9221e3a2d","modified":1667231184377},{"_id":"node_modules/hexo-theme-stellar/layout/post.ejs","hash":"c4f577a6153e1ef0de010ec6a1428f7e49017129","modified":1667231184380},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/head.ejs","hash":"7a68b298679055637071ab2229f1147c3d02607a","modified":1667231184369},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/menubtn.ejs","hash":"1ebd3fa9b1586078e8726e58b8ed1b096b8f0524","modified":1667231184377},{"_id":"node_modules/hexo-theme-stellar/scripts/events/index.js","hash":"a3d83e2577ff159c3d70ff345b690faae6c3147d","modified":1667231184393},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/index.js","hash":"5667f028990dd556133080090a5fcb00c64f05ac","modified":1667231184394},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/404.js","hash":"294c2e12ebc858cb47363626e5c6edcf4a5d67fa","modified":1667231184384},{"_id":"node_modules/hexo-theme-stellar/layout/tags.ejs","hash":"0307bf728c1f64e83808fcccd20336f83fb9dc28","modified":1667231184382},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/wiki.js","hash":"7ced88545f9a857098e3ac28de3ff82f141228d1","modified":1667231184403},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/tags.js","hash":"9f9421ec4dc85e2bb8c3a376d4eb1c7c59d3b211","modified":1667231184400},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/categories.js","hash":"37a443389795bf9047ab530e6111a5dde8567db5","modified":1667231184385},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/category_color.js","hash":"35f459e5dcd845eef3d9b7a6205f015b92399d24","modified":1667231184385},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/parse_config.js","hash":"c9712de293586ca529b9df8789b79e561acf85a9","modified":1667231184397},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/related_posts.js","hash":"f555e06b792cce805f17ebe51f4984d05ce11508","modified":1667231184398},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/scrollreveal.js","hash":"aecbaf28dfafe100bca014381e3f6e8f799da4d1","modified":1667231184398},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/stellar_info.js","hash":"5b7a10c8b09237a467767f5467749c7d9378c2c1","modified":1667231184399},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/about.js","hash":"8b8e85dd00f762124eaaa81e6ac8de6db53a62ec","modified":1667231184384},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/border.js","hash":"dd4bf03e6928d6f3cf1d70ec0fecc53f3a1405ce","modified":1667231184385},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/checkbox.js","hash":"85a0f422a338cb5fa5c70ef30c93da95ef5ebbcf","modified":1667231184385},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/copy.js","hash":"4c57d903d724ccea72cf17293de08f297f0d6a86","modified":1667231184386},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/emoji.js","hash":"7bd4b538fe1aa622a9dc03047942cc024f9e0d69","modified":1667231184387},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/folders.js","hash":"e52148d6aab3cad0a1764af051bc6cb25b640cac","modified":1667231184388},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/folding.js","hash":"c3ea8c7271ade7522ef6c3f9b538a92972f51fde","modified":1667231184388},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/frame.js","hash":"6eba9dab0fde8908234df632b85efa6a312e7bf3","modified":1667231184388},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/friends.js","hash":"3f576599445aa9ac2e247bbea60e72b773de754a","modified":1667231184388},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/ghcard.js","hash":"d176c0c6d7d6dfe4309a03db9ddd2e63b07ef4a7","modified":1667231184391},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/index.js","hash":"9511825315e0031dcf546f7e245140f40f6b8b01","modified":1667231184394},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/inline-labels.js","hash":"a9805af165a1ee44fd7f9dbb89c9d0744a4a9543","modified":1667231184394},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/image.js","hash":"22aafb984b796c3e3d120990529ebd5c9859de78","modified":1667231184392},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/link.js","hash":"a7b52c465c688195c0f223a5d3c369c4d4bd583a","modified":1667231184394},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/mark.js","hash":"bf4c9d7af4ec1e72af0aa6c7214777af4366d6c2","modified":1667231184396},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/navbar.js","hash":"750339386bf9886ec8dcfdab116f9fd3d33d1fac","modified":1667231184396},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/note.js","hash":"e7e19449c887a6736d93be39ed9c46e4cdfd5a71","modified":1667231184397},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/poetry.js","hash":"21c44b888c8c110a3c879d904918f33e613ca33c","modified":1667231184397},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/quot.js","hash":"bc8349dbd2c6027c3abc38082e58a17872557522","modified":1667231184397},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/sites.js","hash":"0a975d0b153f4d758f08515c9c18c326c065180d","modified":1667231184398},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/split.js","hash":"e6d6d1370bfe7d727cfada3ce66af1dddb6f0508","modified":1667231184398},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/swiper.js","hash":"dcecff446269b9553d280778640ff434391bfe9b","modified":1667231184399},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/timeline.js","hash":"8bedcf409f4c99bb06e40cf539b3567344a23c85","modified":1667231184400},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/toc.js","hash":"3da29a1a2cfc2894a16d4081b771071afe1b44d7","modified":1667231184403},{"_id":"node_modules/hexo-theme-stellar/source/css/_custom.styl","hash":"5363d8304f90990022ffc8eb5d55e1702b2e951e","modified":1667231184404},{"_id":"node_modules/hexo-theme-stellar/source/css/main.styl","hash":"28f7f6f69ed6aa3083784c0f4c1b17955dc5924e","modified":1667231184416},{"_id":"node_modules/hexo-theme-stellar/source/js/main.js","hash":"53c3ebae815f4a828c78de3f7339aa9ea00ca44d","modified":1667231184396},{"_id":"node_modules/hexo-theme-stellar/layout/wiki.ejs","hash":"6c3f88c3dbb8057cd363276400b777279056c3f0","modified":1667231184383},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/cover/index.ejs","hash":"e9fbadca8e27b334f691d5fe79a377041609073a","modified":1667231184370},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/cover/post_cover.ejs","hash":"cbeab8ad4563eb21b621c9914d8865de9bf132e1","modified":1667231184380},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/cover/wiki_cover.ejs","hash":"936457597273e216b93bc60851d75fbbd1b0357f","modified":1667231184383},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/footer.ejs","hash":"11158ddbfc8a1aa2e897255b0afda3059ac6ef58","modified":1667231184367},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/scripts/index.ejs","hash":"50ad368582b99b0d2e43dd843f512458016c0117","modified":1667231184370},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/header.ejs","hash":"4c19cbca0d50f0bd0e087539b96512379f240099","modified":1667231184369},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/config.js","hash":"cdf612dbbdfd93af990a6bc7e11eedf25eea92ab","modified":1667231184386},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/doc_tree.js","hash":"b24549addfc6c99212bac1c4f6ca9841c4e3d21d","modified":1667231184386},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/utils.js","hash":"2c342ae9ada7275beb6eaf51d010ee1cccf1033d","modified":1667231184403},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/lib/img_lazyload.js","hash":"b3dedcc1fc4189589e63d4fa6f169a70e9d63cd1","modified":1667231184392},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/lib/img_onerror.js","hash":"d44a8e20d4d537c0cf85b980e1fc3bc84865a2d3","modified":1667231184393},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/users.js","hash":"089515de4dee7f54525480232b9a9665904668c4","modified":1667231184403},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/menu.ejs","hash":"796646955e538246f95d19cdafccae17731052ac","modified":1667231184377},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/logo.ejs","hash":"ef8b0577743d1cae2e673e27970d34d33a46da9d","modified":1667231184376},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/base.styl","hash":"8cc54f50e2fba99b39a1d79be4602423384635b4","modified":1667231184407},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/tabs.js","hash":"9931f1f6a4ecc70fbbbc9f0aa74b07fbeeaf2779","modified":1667231184399},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/index.ejs","hash":"e865a65e8094dfa07987d1686a8eefe247e6c2ef","modified":1667231184371},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/control.styl","hash":"75081ca9d522a76ec4acffb8111c918b2297650a","modified":1667231184410},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/button.styl","hash":"b16288e5d0755e919f3413cc0617ff51d0ea1e09","modified":1667231184408},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/cap.styl","hash":"93b576cd69636f8e75a5ab59d47ad3b937a39d96","modified":1667231184408},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/device.styl","hash":"3019d3ffe695b0bbf444527aac2e7accb089319e","modified":1667231184410},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/html.styl","hash":"9ba9b6d85dad3036a7b8172ef8317f51da3ca693","modified":1667231184414},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/blur.styl","hash":"63af0026e4a36c99c20b34c590ed53483dffa4dc","modified":1667231184408},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/image.styl","hash":"cca1103a9185202b13be49e16d77d259e9ffb482","modified":1667231184414},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/input.styl","hash":"2a765355617dd96c5974e7872c34eabc0052ed6f","modified":1667231184415},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/loading.styl","hash":"6962fd568ad9779146742b8b8928cec107972e8e","modified":1667231184416},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/highlight.styl","hash":"bcd1af1f3757d4fb42a3518d63955b4088f6d570","modified":1667231184413},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/pre.styl","hash":"86b2ef12a8012949171a3a53f9e241281e51af4e","modified":1667231184420},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/svg.styl","hash":"dd2fbe25de3e3cf475279d375e0d5e925f9058ea","modified":1667231184423},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/title.styl","hash":"1580935e7c36ff83569e62be523293fd3cc62484","modified":1667231184423},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/span.styl","hash":"78cf1b0b82fd60234e1f352501c3a27d1fe3be6b","modified":1667231184422},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/toast.styl","hash":"61ca6b42ded511bcc99fd684800bf84c5ab9454a","modified":1667231184424},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/const.styl","hash":"f3670f705b34a54d4664c425023a18383c255d72","modified":1667231184409},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/func.styl","hash":"2f4a239ec8c57957d766c0eb06e23de690f9fd78","modified":1667231184413},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/theme.styl","hash":"9f73704bd129b7865103a9d39b8ae5aa49b06cc8","modified":1667231184423},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/layout.styl","hash":"c091bb4b287f4fdb206ed80c1bd7260229bfd523","modified":1667231184415},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/main.styl","hash":"403c1dbbbb38281496ca81c5690aa10ca86ad920","modified":1667231184416},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/list.styl","hash":"1e951806da01bf4c625ab8fea1c840d4e3bfd505","modified":1667231184416},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/index.styl","hash":"388efb67ba82dc257f142281759519c69aba86ce","modified":1667231184414},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/md.styl","hash":"a7864c67ab780f5f27543943caa174c046ce6932","modified":1667231184416},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/fancybox.styl","hash":"21fabc8af9fe193d8376ecc8bd9125207f51e927","modified":1667231184411},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/index.styl","hash":"04855aa1fb557c55da1e0db354d5fce9d0d84df9","modified":1667231184415},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/lazyload.styl","hash":"44f231219c10397af1aa353c4d7b7e0e34323b40","modified":1667231184415},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/swiper.styl","hash":"4cda902a8a3855d5aa0e644aa674e053db824023","modified":1667231184423},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/fcircle.js","hash":"8854834b08eaa0751fe362df4b2b67744648b149","modified":1667231184387},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/linkcard.js","hash":"45fc4f1b856c2125c633bfec6be627ec3957d3c0","modified":1667231184394},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/friends.js","hash":"200932adef60298f6a0d03d1d15199a195ffbd77","modified":1667231184389},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/ghinfo.js","hash":"103dc7c2fa35aebde8d560d6473a7b03d10951ec","modified":1667231184391},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/scrollreveal.styl","hash":"bfeabad9cdaaa77ea0fa1fc0f20dc91520356a6f","modified":1667231184421},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/sites.js","hash":"75e32787f380558119b1665fd9a9f6c6430c0b31","modified":1667231184398},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/article_footer.ejs","hash":"a6465110dc54eb2a94981042e1f0cc29406ba765","modified":1667231184365},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/timeline.js","hash":"88a0fca3b50560c55e883ce8ecc3f38b930f45b4","modified":1667231184403},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/read_next.ejs","hash":"d4df437e362df8b3a8af9dd4c21ce395e5333f97","modified":1667231184381},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/related_posts.ejs","hash":"3dc3edaaa099ffaf8d2f099f76441d6a7a0931de","modified":1667231184381},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/header/index.ejs","hash":"7256167dc6a76fe4b0725dac3c803e1b26b1f696","modified":1667231184370},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb.ejs","hash":"59e6a27fb0f1bc9a3f41aadcba8d5b0dc4ca635b","modified":1667231184366},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejs","hash":"edf29679483f8d12f9795751a4576b27d92cf008","modified":1667231184376},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/paginator.ejs","hash":"4b86b8ea1781a93f1091dfcb438078e19b65ce6c","modified":1667231184380},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_wiki.ejs","hash":"a6e53d22caa72809e34b664a32293a4ca289825f","modified":1667231184376},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/post_card.ejs","hash":"05d5d62d07026c114101056137bbecbfb77706d5","modified":1667231184380},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/ghissues.ejs","hash":"5db4259893fbc55d699da3d6088e433622eb7a41","modified":1667231184368},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/wiki_card.ejs","hash":"8cf9145ec6a189ee0de725fc264378168e1ff09a","modified":1667231184383},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/layout.ejs","hash":"a7c2d6f58ea2db666bf1626b9f253ed990a3fa19","modified":1667231184374},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/script.ejs","hash":"a9dce8066723ada71d91960d5dd07ab194cc3b05","modified":1667231184382},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/ghrepo.ejs","hash":"b4fb5027c587b796b144d8d7996124921ed3f16d","modified":1667231184368},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/markdown.ejs","hash":"4d4a269c7005e993aabbc95ccc705e23b31a2ad6","modified":1667231184377},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/ghuser.ejs","hash":"b3c6ce9aab7012d9905cafdb3e5822232779c685","modified":1667231184368},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/recent.ejs","hash":"e928d25a50feb3565dc9abdb839288e2e06b0c4a","modified":1667231184381},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/related.ejs","hash":"3322f6faa9ee2d5f560aea93727eda9ddfee3f12","modified":1667231184381},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/pages/archives.styl","hash":"6a2ed5fd75e41499ca539269361b8bd8a2c541be","modified":1667231184406},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/tagcloud.ejs","hash":"bcec8da6e5f6fe7479370c36901cee9c094ccf5e","modified":1667231184382},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/timeline.ejs","hash":"c8f97af0b64dfed658b18318cd285214717226f0","modified":1667231184383},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/pages/error.styl","hash":"4c93c760b22d0e21800c45d7dc6f9e50c50da590","modified":1667231184411},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/article-footer.styl","hash":"60bb25b35e1cd61516169d9ba0ab1a0962af0673","modified":1667231184406},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/bread-nav.styl","hash":"478d2f568f42a4fdf3cc7b43157070d1d2897d4b","modified":1667231184408},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/cover.styl","hash":"0c1376d953d9b43b8beb67e8f0ebd884ebf50f9d","modified":1667231184410},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/footer.styl","hash":"e423562d8a628d0c934a4ae1361dc63ff5b4fa57","modified":1667231184412},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/navbar.styl","hash":"4ba2dd179a5419f27ad4c67b1633b5c33e7ea1a0","modified":1667231184417},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/related.styl","hash":"1fc20729c232fb2f9ea1357decc5d630f889ed0c","modified":1667231184421},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/paginator.styl","hash":"5edf5b0a9eb95710918e4d1da20cc6d21bfacabe","modified":1667231184419},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/toc.ejs","hash":"4b5143ddb9242094a8687e00093949806f146de0","modified":1667231184383},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/footer.styl","hash":"5a4492a160f8acdf3783f4df169d4b87ac85efca","modified":1667231184412},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/ghrepo.styl","hash":"7d3d6634d865ab1edea724f135d0ee9d24c6609d","modified":1667231184413},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/ghuser.styl","hash":"ea5553dc409b07613a82c14d14fa3ee8aa7fafee","modified":1667231184413},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/toc_blog.styl","hash":"0a2f1ada9130329fdc793603a9dfbc167303483f","modified":1667231184424},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/toc_common.styl","hash":"8463462dbf077372479b5ca63c7a248483a7b9dd","modified":1667231184424},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/sidebar.styl","hash":"30dc153c5fd2d188ac7276d30c41baec9d2d6ba1","modified":1667231184421},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/toc_wiki.styl","hash":"861d75f3df735eb2dacdc376536394b8dffd40a7","modified":1667231184424},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/widgets.styl","hash":"d2bc5011999dcbf10064d13f275e2e04bda9cbfe","modified":1667231184425},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/about.styl","hash":"46e5be0c7c3de1d6c3156577c9436d80f195b3b7","modified":1667231184405},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/checkbox.styl","hash":"c96080ea7d6149a2324d413b155ff9e984ffdad4","modified":1667231184408},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/common.styl","hash":"4297bff28620ea7c646e1379497112b92a30f976","modified":1667231184409},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/copy.styl","hash":"55dbbb171f3c4dd1a039c98914a8ed8820b5bf00","modified":1667231184410},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/emoji.styl","hash":"e51673f777d08ec3860f603de49a5d5aa51c06c0","modified":1667231184410},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/folders.styl","hash":"335804379831ad6185ecafd7bea4d639ca803862","modified":1667231184411},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/folding.styl","hash":"dc3239b47511813b1e5163df7833e579fe89e3a5","modified":1667231184411},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/ghcard.styl","hash":"98a50d3fab79ce03dd7f161fe3442d803712c284","modified":1667231184413},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/frame.styl","hash":"310b0577c19f2810af58ff0a77c5d8c0361bc552","modified":1667231184412},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/image.styl","hash":"f6edd2c71ac736332166a8240b6952629bf67ce5","modified":1667231184414},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/friends.styl","hash":"90f84ec655794813fd39ff75df9ec0babd7ff654","modified":1667231184413},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/inline-labels.styl","hash":"2f83b3c0b69e275a95ec526ad0e6b7c6030eb031","modified":1667231184415},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/link.styl","hash":"ae4e4602f9b56022728f35b6b0f01c2c94433c51","modified":1667231184416},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/mark.styl","hash":"9600c2d78b7044da545d1f9912587c2ad899c3fc","modified":1667231184416},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/navbar.styl","hash":"2c91af01cb587b8c751d4af88e62d068988794b9","modified":1667231184417},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/note.styl","hash":"8afc900dc688057809e76653eaccb972f3e6dd68","modified":1667231184419},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/poetry.styl","hash":"44313ce3be05a0bec3c7f8a69fea4f7c9cfebfbb","modified":1667231184420},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/quot.styl","hash":"92a9d9112d6f5dd73d6b081d622110dcb2ffb821","modified":1667231184420},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/sites.styl","hash":"922fff4c07d9c0ac22d422486220b3ffd34bd7bc","modified":1667231184421},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/split.styl","hash":"1c2081c78b3770025303c09fe2da492e31da4b6b","modified":1667231184422},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/tabs.styl","hash":"0b8dc93cd2a77692edd1d4daf7e9cea5bf75920b","modified":1667231184423},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/toc.styl","hash":"3efb739e8a59cb52e26a01190475be98bb0ac022","modified":1667231184424},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/timeline.styl","hash":"3b0341b22b07262d7994e666dd2edef2c99d5a19","modified":1667231184423},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/waline.styl","hash":"30eab08b9ba86ad2146bc913d415d39799d25d5c","modified":1667231184425},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/beaudar/layout.ejs","hash":"1a9b6f3e189d9f282e01fb758e6f39bf34ccc53c","modified":1667231184372},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/beaudar/script.ejs","hash":"94b21ec4854d5321693228fbe6edf6688d3e333b","modified":1667231184381},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/giscus/layout.ejs","hash":"e0a06db66b0e41f9de999444e508e98a4f23fbb7","modified":1667231184373},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/twikoo.styl","hash":"8fb3420158c1bda65ca195518b83baace333b348","modified":1667231184424},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/utterances.styl","hash":"6dbcf87eab273268bdd24d220d7da2ea89453151","modified":1667231184425},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/giscus/script.ejs","hash":"5ccda22fd29ff562c0435c849b5708056116fafa","modified":1667231184382},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/twikoo/layout.ejs","hash":"e662b87a983ed2347b642bf2ef9f0250f7273b60","modified":1667231184374},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/twikoo/script.ejs","hash":"3c6315837d18f9de20143afc45166a6a3fbb07b9","modified":1667231184382},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/utterances/layout.ejs","hash":"2310bdef7c57cbaede9f91c810e1db829bef6fb2","modified":1667231184375},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/utterances/script.ejs","hash":"5a01541e2bbad0538849fbbf13c74d2dafc19a67","modified":1667231184382},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/waline/layout.ejs","hash":"fba1af008b1ef7b33ac36506c79eec3253be1227","modified":1667231184376},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/waline/script.ejs","hash":"e825fe5c81ab74b48a55caca931c477736deef60","modified":1667231184382},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/beaudar.styl","hash":"e9800f67a650f1c022aee494768e05da76e6a6b7","modified":1667231184408},{"_id":"public/404.html","hash":"6eeb3a23fb200ea21b250d4b2038b79dc9cc0b4f","modified":1667299942316},{"_id":"public/Stellar/index.html","hash":"9a513d56262c2c836a5715eb860762624f1b4434","modified":1667299363648},{"_id":"public/more/index.html","hash":"c02d0509b6e5821612d35f5dec3e3a403aa61e1d","modified":1667299942316},{"_id":"public/index/index.html","hash":"0e25e661def73a00c972fbedc08b02b0773402c7","modified":1667299942316},{"_id":"public/notes/index.html","hash":"a2fce300bccccc7f5a4b480167c38b67c378f955","modified":1667299942316},{"_id":"public/post/index.html","hash":"ce406f1d66e32a99c7d201789fe5c36d2cf6154d","modified":1667299942316},{"_id":"public/wiki/index.html","hash":"e51dad359ca191601033869298e332dfa3b777d3","modified":1667299942316},{"_id":"public/2022/11/01/2022_11_1_声明/index.html","hash":"cd4f9ee03b4f76fa222dafff2179063b52832ed9","modified":1667299363648},{"_id":"public/2022/07/03/2022-07-03_简介/index.html","hash":"d2991b76bf51db28b950a837babc73792374e128","modified":1667299363648},{"_id":"public/archives/index.html","hash":"d3294e4d0070a4028e4c42251d22f54789e46ef7","modified":1667299942316},{"_id":"public/archives/2022/index.html","hash":"f00d1cd41bf824f7dd5c3432129387dce8502e25","modified":1667299942316},{"_id":"public/archives/2022/07/index.html","hash":"b5014097447817649b88d978f5776606b32c58c5","modified":1667299942316},{"_id":"public/archives/2022/10/index.html","hash":"beadb38974eb7a09033f631db352017d934ba6cd","modified":1667299942316},{"_id":"public/archives/2022/11/index.html","hash":"24a08637d06aee87c92fa8cb27f07df35523a091","modified":1667299363648},{"_id":"public/tags/C/index.html","hash":"993a1b4cfdf4e94a811e380cef8dea0fd09ebde0","modified":1667299942316},{"_id":"public/tags/记录/index.html","hash":"eb0f29dcc5eac744c056cc4059b33426dab3dcc7","modified":1667299363648},{"_id":"public/tags/Linux/index.html","hash":"76305820f58bb14a7b7288d02f06b28ae46ab3d7","modified":1667299942316},{"_id":"public/tags/index.html","hash":"f400dd589d3881aedb71b65af0004ecba8171fe4","modified":1667299942316},{"_id":"public/2022/10/28/2022-10-28_C语言笔记简化版/index.html","hash":"d2ce19d9c3275e18d479a7af15b8e73c9a1e5066","modified":1667299942316},{"_id":"public/2022/10/25/2022-10-19_学生成绩管理系统/index.html","hash":"381f25248e7ce0598cb1a3f8c18be83e1fe079bb","modified":1667299942316},{"_id":"public/2022/07/06/2022-07-06-C语言学习记录_day/index.html","hash":"e5c2dfa26733ba8627417095ba9d399f279b1489","modified":1667299942316},{"_id":"public/2022/07/06/2022-07-06_初识Linux /index.html","hash":"d7afe081d4abdb86d4b60ac252315fa1832382bb","modified":1667299363648},{"_id":"public/2022/07/06/2022-07-06_Linux常用命令/index.html","hash":"165f8b74d0b2e9028a7647ca2dc4a0bf0f336507","modified":1667299942316},{"_id":"public/index.html","hash":"d00f3552f0e1e819b33d6d21eeb7dd2158b23eb3","modified":1667299942316},{"_id":"public/js/main.js","hash":"53c3ebae815f4a828c78de3f7339aa9ea00ca44d","modified":1667299363648},{"_id":"public/js/plugins/friends.js","hash":"200932adef60298f6a0d03d1d15199a195ffbd77","modified":1667299363648},{"_id":"public/js/plugins/fcircle.js","hash":"8854834b08eaa0751fe362df4b2b67744648b149","modified":1667299363648},{"_id":"public/js/plugins/ghinfo.js","hash":"103dc7c2fa35aebde8d560d6473a7b03d10951ec","modified":1667299363648},{"_id":"public/js/plugins/linkcard.js","hash":"45fc4f1b856c2125c633bfec6be627ec3957d3c0","modified":1667299363648},{"_id":"public/js/plugins/sites.js","hash":"75e32787f380558119b1665fd9a9f6c6430c0b31","modified":1667299363648},{"_id":"public/js/plugins/timeline.js","hash":"88a0fca3b50560c55e883ce8ecc3f38b930f45b4","modified":1667299363648},{"_id":"public/css/main.css","hash":"161ef2f1457714cb95aa3a907019720715c9438f","modified":1667299363648},{"_id":"source/_posts/.DS_Store","hash":"aeceae47647cc663d1066b12f25d618902a5bd0d","modified":1667299725081},{"_id":"source/_posts/2022-09-15_Hexo-Linux搭建博客.md","hash":"27192ad3c91ab13931d62b1dadaf495e0f791003","modified":1666954604495},{"_id":"public/archives/2022/09/index.html","hash":"8ffc5f1c459b659d6b6bc8958c964109ee214112","modified":1667299942316},{"_id":"public/2022/09/15/2022-09-15_Hexo-Linux搭建博客/index.html","hash":"78c81c463107dd798b03fd2164850ae87c3d728c","modified":1667299942316}],"Category":[],"Data":[{"_id":"widgets","data":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，采用Hexo开源主题Stellar，刚使用不仅，有些功能还在研究中，敬请期待......\n"}}}],"Page":[{"layout":"wiki","wiki":"Stellar","title":"这是分页标题","_content":"","source":"Stellar/index.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: Stellar # 这是项目名\ntitle: 这是分页标题\n---\n","date":"2022-11-01T10:29:39.875Z","updated":"2022-11-01T10:29:39.875Z","path":"Stellar/index.html","comments":1,"_id":"cl9y2zqrq0000oy9k1z55c6xc","content":"","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":""},{"title":"","date":"2022-10-31T16:01:06.000Z","_content":"","source":"more/index.md","raw":"---\ntitle: \ndate: 2022-11-01 00:01:06\n---\n","updated":"2022-10-31T16:17:39.397Z","path":"more/index.html","comments":1,"layout":"page","_id":"cl9y2zqrv0002oy9k51nj5248","content":"","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":""},{"title":"","date":"2022-10-31T16:03:12.000Z","_content":"<img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/hexo_blog/hello-alan.png\" width = \"296.23\" height = \"96\" />\n\n\n## 嗨！我是Alan👋\n\n一个 Java、C、Python 的开发者。\n\n## 📫-联系我\n如果你需要联系我，给我发送邮件是最高效的方法。我会每4到5个小时查看一次收件箱，所以，除非你的邮件被系统移动到垃圾邮件中（一般我会每周简单检查一下垃圾邮件箱然后直接清空，所以甚至有可能我根本不会看到你的邮件），你将会可以很快收到我的回复。\n\n\n## 👨🏻‍💻-我的-GitHub\n\n## 🗓-近期日程\n\n## 🤩-兴趣爱好","source":"index/index.md","raw":"---\ntitle: \ndate: 2022-11-01 00:03:12\n---\n<img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/hexo_blog/hello-alan.png\" width = \"296.23\" height = \"96\" />\n\n\n## 嗨！我是Alan👋\n\n一个 Java、C、Python 的开发者。\n\n## 📫-联系我\n如果你需要联系我，给我发送邮件是最高效的方法。我会每4到5个小时查看一次收件箱，所以，除非你的邮件被系统移动到垃圾邮件中（一般我会每周简单检查一下垃圾邮件箱然后直接清空，所以甚至有可能我根本不会看到你的邮件），你将会可以很快收到我的回复。\n\n\n## 👨🏻‍💻-我的-GitHub\n\n## 🗓-近期日程\n\n## 🤩-兴趣爱好","updated":"2022-11-01T10:43:40.451Z","path":"index/index.html","_id":"cl9y2zqrx0005oy9kbjw65z37","comments":1,"layout":"page","content":"<img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/hexo_blog/hello-alan.png\" width = \"296.23\" height = \"96\" />\n\n\n<h2 id=\"嗨！我是Alan👋\"><a href=\"#嗨！我是Alan👋\" class=\"headerlink\" title=\"嗨！我是Alan👋\"></a>嗨！我是Alan👋</h2><p>一个 Java、C、Python 的开发者。</p>\n<h2 id=\"📫-联系我\"><a href=\"#📫-联系我\" class=\"headerlink\" title=\"📫-联系我\"></a>📫-联系我</h2><p>如果你需要联系我，给我发送邮件是最高效的方法。我会每4到5个小时查看一次收件箱，所以，除非你的邮件被系统移动到垃圾邮件中（一般我会每周简单检查一下垃圾邮件箱然后直接清空，所以甚至有可能我根本不会看到你的邮件），你将会可以很快收到我的回复。</p>\n<h2 id=\"👨🏻‍💻-我的-GitHub\"><a href=\"#👨🏻‍💻-我的-GitHub\" class=\"headerlink\" title=\"👨🏻‍💻-我的-GitHub\"></a>👨🏻‍💻-我的-GitHub</h2><h2 id=\"🗓-近期日程\"><a href=\"#🗓-近期日程\" class=\"headerlink\" title=\"🗓-近期日程\"></a>🗓-近期日程</h2><h2 id=\"🤩-兴趣爱好\"><a href=\"#🤩-兴趣爱好\" class=\"headerlink\" title=\"🤩-兴趣爱好\"></a>🤩-兴趣爱好</h2>","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":"<img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/hexo_blog/hello-alan.png\" width = \"296.23\" height = \"96\" />\n\n\n<h2 id=\"嗨！我是Alan👋\"><a href=\"#嗨！我是Alan👋\" class=\"headerlink\" title=\"嗨！我是Alan👋\"></a>嗨！我是Alan👋</h2><p>一个 Java、C、Python 的开发者。</p>\n<h2 id=\"📫-联系我\"><a href=\"#📫-联系我\" class=\"headerlink\" title=\"📫-联系我\"></a>📫-联系我</h2><p>如果你需要联系我，给我发送邮件是最高效的方法。我会每4到5个小时查看一次收件箱，所以，除非你的邮件被系统移动到垃圾邮件中（一般我会每周简单检查一下垃圾邮件箱然后直接清空，所以甚至有可能我根本不会看到你的邮件），你将会可以很快收到我的回复。</p>\n<h2 id=\"👨🏻‍💻-我的-GitHub\"><a href=\"#👨🏻‍💻-我的-GitHub\" class=\"headerlink\" title=\"👨🏻‍💻-我的-GitHub\"></a>👨🏻‍💻-我的-GitHub</h2><h2 id=\"🗓-近期日程\"><a href=\"#🗓-近期日程\" class=\"headerlink\" title=\"🗓-近期日程\"></a>🗓-近期日程</h2><h2 id=\"🤩-兴趣爱好\"><a href=\"#🤩-兴趣爱好\" class=\"headerlink\" title=\"🤩-兴趣爱好\"></a>🤩-兴趣爱好</h2>"},{"title":"","date":"2022-10-31T16:00:51.000Z","_content":"","source":"notes/index.md","raw":"---\ntitle: \ndate: 2022-11-01 00:00:51\n---\n","updated":"2022-10-31T16:17:44.927Z","path":"notes/index.html","comments":1,"layout":"page","_id":"cl9y2zqrz0007oy9kdw827fo8","content":"","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":""},{"title":"","date":"2022-10-31T16:01:16.000Z","_content":"","source":"post/index.md","raw":"---\ntitle: \ndate: 2022-11-01 00:01:16\n---\n","updated":"2022-10-31T16:17:48.319Z","path":"post/index.html","comments":1,"layout":"page","_id":"cl9y2zqs00009oy9kgqlke3s0","content":"","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":""},{"title":"","date":"2022-10-31T16:00:16.000Z","_content":"","source":"wiki/index.md","raw":"---\ntitle: \ndate: 2022-11-01 00:00:16\n---\n","updated":"2022-10-31T16:15:57.774Z","path":"wiki/index.html","comments":1,"layout":"page","_id":"cl9y2zqs1000doy9keaqbbylk","content":"","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":""}],"Post":[{"title":"C语言学习记录","date":"2022-07-06T13:07:32.000Z","_content":"\n## 简介\n\n&emsp;&emsp;今天，我买的计算机相关书籍回来了，正好将之前学漏的回炉重造下，关于学C还是学java我纠结了很久，最后还是打算先把C语言学完，然后在学java。现在从C语言最初的内容开始学，好了下面开始正式内容。\n\n##  什么是计算机程序？\n\n&emsp;&emsp;所谓程序，就是一组计算机能识别和执行的指令，每一条指令使计算机执行特定的操作。只要让计算机执行这个程序，计算机就会“自动地”执行各条指令。\n\n&emsp;&emsp;为了使计算机系统能实现各种功能，需要成千上万个程序组成。\n\n&emsp;\t计算机的一切操作都是由程序控制的，离开程序，计算机将一事无成\n\n## 计算机语言\n\n&emsp;&emsp;所谓语言，就是一门沟通的工具，人与人有中文和英文等等，则机器与机器也有自己独特的语言。为了能使人与计算机交互，需要创造一种计算机和人都能识别的语言，这就是计算机语言。计算机语言的发展分为以下阶段：\n\n&emsp;&emsp;**机器语言**  计算机工作是基于二进制，从根本上讲计算机只能识别由0和1组成的指令。这种计算机能直接识别和接受的二进制代码称为机器指令。机器指令的集合就是该计算机的机器语言。\n\n&emsp;&emsp;**符号语言**  为了克服机器语言上的困难，人们创造了符号语言，它用一些英文字母和数字表示一个指令，它需要用一种称为汇编程序的软件把符号语言转化为机器指令。一般，一条符号语言的指令对应转换为一条机器指令。转换过程称为“代真”或“汇编”，因此，符号语言又称为汇编语言。\n\n&emsp;&emsp;**高级语言**  为了克服第几语言的缺陷，人们创造了高级语言，它很接近于人们习惯使用的自然语言和数学语言。程序中用到的语句和指令都是用英文单词表示，程序中所用的运算符和运算表达式和人们日常生活中所用到的数学式子差不多，更容易理解。\n\n&emsp;&emsp;当然，计算机也不能直接识别高级程序，业需要进行翻译，我们把刚刚编写的代码称为源程序，把转换得到的程序称为目标程序。\n\n&emsp;&emsp;并且高级语言经历了非结构化的语言、结构化语言、面向对象的语言这三种过程。\n\n## C语言的特点\n\n1.语言简洁、紧凑、使用方便、灵活。\n\n2.运算符丰富\n\n3.数据类型丰富\n\n4.具有结构化的到控制语句\n\n5.语法限制不太严格，程序设计自由度大\n\n6.C语言允许直接访问物理地址，能进行bit的操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作\n\n7.C语言编写的程序可移植性好\n\n8.生成的目标代码质量高，程序执行效率高\n\n## 最简单的C语言程序\n\n1.1要求在屏幕上输出一下一行信息。\n\nThis is a C program.\n\n思路：在主函数中用printf函数原样输出该以上文字。\n\n```c\n#include <stdio.h>\t\t\t\t\t\t\t\t\t\t//这是编译预处理指令\nint main()\t\t\t\t\t\t\t\t\t\t\t\t\t\t//定义主函数\n{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//函数开始的标志\n  printf(\"This is a C program.\\n\")\t\t//输出所指定的一行信息\n  return 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//函数执行完毕时返回函数值0\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//函数结束的标志\n```\n\n\n##  C语言的基本结构\n\n第一天写到最简单的打印字符型程序\n\n```c\n#include <stdio.h>\t\n\nint main()\n\n{\n\n printf(\"This is a C program.\\n\")\t\n  \n return 0;\t\t\t\t\t\t\t\t\t\t\n\n\n}\t\n```\n\n通过这个简单的例子，可以看到，一个C语言程序的结构有一下特点   \n\n1.一个程序由一个或多个源程序文件组成  \n\n2.函数事C程序的主要组成部分  \n\n3.一个函数包括两个部分  \n\n4.函数总是从main函数开始执行  \n\n5.程序中要求计算机完成的操作时由函数中的C语句完成的  \n\n6.在每个数据声明和语句的最后必须有一个分号  \n\n7.C语言本省不提供输入输出语句  \n\n8.程序应当包含注释  \n\n\n\n###### 一个源程序文件可以包括3个部分\n\n1.预处理指令  \n\n2.全局声明  \n\n3.函数定义  \n\n##### 一个函数包括两个部分\n\n1.函数首部  \n\n2.函数体（声明部分/执行部分）  \n\n\n\n## 程序设计的任务\n\n1.问题分析：对问题进行分析，找出解决问题的规律  \n\n2.设计算法：设计出解题的方法和步骤  \n\n3.编写程序：根据得到的算法，用一种高级语言编写出源程序  \n\n4.对源程序进行编辑、编译和连接：得到可执行程序  \n\n5.运行程序，分析结果：运行可执行程序，得到运行结果  \n\n\n\n## 什么是算法\n\n算法从广义的角度来说，为解决一个问题而采取的方法和步骤就称为算法\n\n## 算法的特性\n\n1.有穷性  \n\n2.确定性  \n\n3.有零个或多个输入  \n\n4.有一个或多个输出\n\n5.有效性  \n\n## 流程图\n\n算法的表示分为一下三种种类：  \n\n1.传统型流程图  \n\n2.N-S流程图表示算法  \n\n3.用伪代码表示算法\n\n###### 三种基本结构\n\n1.顺序结构  \n\n2.选择结构  \n\n3.循环结构  \n\n\n\n循环结构又分为    \n\n1.当型（while）循环结构  \n\n2.直到型（until型）循环结构  \n\n\n\n以上三种基本结构又有一下共同特点:    \n\n1.只有一个入口  \n\n2.只有一个出口  \n\n## 结构化程序设计方法\n\n1.自顶向下  \n\n2.逐步细化  \n\n3.模块化设计  \n\n4.结构化编码  \n\n\n## 注意：这篇属于后面的篇章\n## 递归\n\n递归类似于函数的自身引用，如f(f(x))，就是自己重复调用自己，达到完成相同逻辑切重复的用途，在许多方面都有引用。  \n\n使用递归要注意一下两点：  \n\n1.自己得调用自己  \n\n2.要有结束条件  \n\n注意：第二点尤其重要，因为如果没有结束条件，就会陷入死循环，从而直到耗尽内存为止。  \n\n## 递归用途 汉诺塔\n\n一、汉诺塔（Tower of Hanoi），又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。  \n![hanoi](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/20210427074620328.gif)\n\n```c\n#include <stdio.h>\nvoid hanoi(int n,char x,char y,char z);\nvoid hanoi(int n,char x,char y,char z)\n{\n\tif(n==1)\n\t{\n\t\tprintf(\"%c-->%c\\n\",x,z);\n\t}\n\telse\n\t{\n\t\thanoi(n-1,x,z,y);\n\t\tprintf(\"%c-->%c\\n\",x,z);\n\t\thanoi(n-1,y,x,z);\n\t}\n}\nint main()\n{\n\tint n;\n\tprintf(\"请输入汉诺塔的层数：\");\n\tscanf(\"%d\",&n);\n\thanoi(n,'X','Y','Z');\n\treturn 0;\n}\n\n```\n\n下面是运行结果：  \n\n![运行](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-07-09%20%E4%B8%8B%E5%8D%8810.26.38.png)\n\n下面是代码逻辑图hanoi改了下，变成了hanio_step意思和逻辑不改变:  \n\n![逻辑](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/e51dd0cb01e844a49683da13e756e937.png)\n\n## 结构体\n一般用的变量互相独立，无内在联系，但有些数据有内在联系，成组出现，例如一个学生的学号，姓名，性别……  \n这种一般无法用数组存储，因为数组一个只能存放同一类型的数据，所以用户可以建立由不同类型数据组成的组合型的数据结构，它称为结构体。  \n\n声明一个结构体类型的一般形式为：  \n```\nstruct 结构体名\n{\n\t成员1;\n\t成员2；\n\t……\n\t成员n;\n};\n```\n例如：图书的标题、作者、价格、日期、\n```\nstruct Book\n{\n\tchar title[128];\n\tchar author[40];\n\tfloat price;\n\tunsigned int date;\n\tchar publisher[40];\n};\n```\n定义结构体变量时，可以在末尾;前定义变量名，也可以在main函数中定义\n区别是一个是全局变量，另一个则是局部变量。 \n成员声明具体如下：   \n```\n类型名 成员名;\n```\n\n## 访问结构体\n访问结构体成员需要用到.点运算符具体用法如下：  \n```\n结构体名.成员名\n```\n注意：每一个成员是结构体中的一个域。 \n## 初始化数组\n在末尾的名字后加等号用大括号括起来，用逗号分开，直接输入相应的值，具体如下:\n```\nstruct Book\n{       \n        char title[128];\n        char author[40];\n        float price; \n        unsigned int date;\n        char publisher[40];\n}book={\"name\",\"author\",49,2022/3/2,'k'};\n初始化指定成员，用点运算符，具体语句为：.成员名=值，\n\n## 结构体嵌套\n指在一个结构体里面有另一个结构体。 \n例如： \n```\nstruct 结构体名\n{\n\tstruct 结构体名 名称；\n}结构体名={初始化值};\n```\n## 访问嵌套结构体成员\n用点号运算符，一层一层用点号进入\n## 结构体数组\n定义方法如下：  \n方法1:  \n```\nstruct 结构体名称\n{\n\t结构体成员；\n}数组名[长度];\n```\n方法2:  \n```\nstruct 结构体名称\n{\n\t结构体成员;\n};\nstruct 结构体名称 数组名[长度];\n```\n在声明结构体后面改成数组形式\n\n## 初始化结构体数组\n同样用，号隔开录入  \n\n## 结构体指针 \nstruct Book * pt;  \npt=&book；  \n指向结构体的指针\n因为结构体变量名不是指向结构体地址的，所以取值必须使用取值运算符例如：pt=&book；  \n## 通过结构体指针访问结构体成员两种方法：\n1.\n(*结构体指针).成员名\n因为点运算符的优先级高于*所以需要使用小括号括起来\n2.\n结构体指针->成员名\n\n## 文件处理\n## 程序执行流程\n输入->处理->输出。 \n\n## 文本文件与二进制文件\n\n## 打开与关闭\n注意：在完成对一个文件的读写操作之后，你必须将其关闭。  \n打开文件使用函数是 fopen\nfopen 用于打开一个文件用于返回文件指针\nfopen 路径 打开模式\n关闭文件使用的函数是 \n\n\n","source":"_posts/2022-07-06-C语言学习记录_day.md","raw":"---\ntitle: C语言学习记录\ndate: 2022-07-06 21:07:32\ntags: [C]\n---\n\n## 简介\n\n&emsp;&emsp;今天，我买的计算机相关书籍回来了，正好将之前学漏的回炉重造下，关于学C还是学java我纠结了很久，最后还是打算先把C语言学完，然后在学java。现在从C语言最初的内容开始学，好了下面开始正式内容。\n\n##  什么是计算机程序？\n\n&emsp;&emsp;所谓程序，就是一组计算机能识别和执行的指令，每一条指令使计算机执行特定的操作。只要让计算机执行这个程序，计算机就会“自动地”执行各条指令。\n\n&emsp;&emsp;为了使计算机系统能实现各种功能，需要成千上万个程序组成。\n\n&emsp;\t计算机的一切操作都是由程序控制的，离开程序，计算机将一事无成\n\n## 计算机语言\n\n&emsp;&emsp;所谓语言，就是一门沟通的工具，人与人有中文和英文等等，则机器与机器也有自己独特的语言。为了能使人与计算机交互，需要创造一种计算机和人都能识别的语言，这就是计算机语言。计算机语言的发展分为以下阶段：\n\n&emsp;&emsp;**机器语言**  计算机工作是基于二进制，从根本上讲计算机只能识别由0和1组成的指令。这种计算机能直接识别和接受的二进制代码称为机器指令。机器指令的集合就是该计算机的机器语言。\n\n&emsp;&emsp;**符号语言**  为了克服机器语言上的困难，人们创造了符号语言，它用一些英文字母和数字表示一个指令，它需要用一种称为汇编程序的软件把符号语言转化为机器指令。一般，一条符号语言的指令对应转换为一条机器指令。转换过程称为“代真”或“汇编”，因此，符号语言又称为汇编语言。\n\n&emsp;&emsp;**高级语言**  为了克服第几语言的缺陷，人们创造了高级语言，它很接近于人们习惯使用的自然语言和数学语言。程序中用到的语句和指令都是用英文单词表示，程序中所用的运算符和运算表达式和人们日常生活中所用到的数学式子差不多，更容易理解。\n\n&emsp;&emsp;当然，计算机也不能直接识别高级程序，业需要进行翻译，我们把刚刚编写的代码称为源程序，把转换得到的程序称为目标程序。\n\n&emsp;&emsp;并且高级语言经历了非结构化的语言、结构化语言、面向对象的语言这三种过程。\n\n## C语言的特点\n\n1.语言简洁、紧凑、使用方便、灵活。\n\n2.运算符丰富\n\n3.数据类型丰富\n\n4.具有结构化的到控制语句\n\n5.语法限制不太严格，程序设计自由度大\n\n6.C语言允许直接访问物理地址，能进行bit的操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作\n\n7.C语言编写的程序可移植性好\n\n8.生成的目标代码质量高，程序执行效率高\n\n## 最简单的C语言程序\n\n1.1要求在屏幕上输出一下一行信息。\n\nThis is a C program.\n\n思路：在主函数中用printf函数原样输出该以上文字。\n\n```c\n#include <stdio.h>\t\t\t\t\t\t\t\t\t\t//这是编译预处理指令\nint main()\t\t\t\t\t\t\t\t\t\t\t\t\t\t//定义主函数\n{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//函数开始的标志\n  printf(\"This is a C program.\\n\")\t\t//输出所指定的一行信息\n  return 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//函数执行完毕时返回函数值0\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//函数结束的标志\n```\n\n\n##  C语言的基本结构\n\n第一天写到最简单的打印字符型程序\n\n```c\n#include <stdio.h>\t\n\nint main()\n\n{\n\n printf(\"This is a C program.\\n\")\t\n  \n return 0;\t\t\t\t\t\t\t\t\t\t\n\n\n}\t\n```\n\n通过这个简单的例子，可以看到，一个C语言程序的结构有一下特点   \n\n1.一个程序由一个或多个源程序文件组成  \n\n2.函数事C程序的主要组成部分  \n\n3.一个函数包括两个部分  \n\n4.函数总是从main函数开始执行  \n\n5.程序中要求计算机完成的操作时由函数中的C语句完成的  \n\n6.在每个数据声明和语句的最后必须有一个分号  \n\n7.C语言本省不提供输入输出语句  \n\n8.程序应当包含注释  \n\n\n\n###### 一个源程序文件可以包括3个部分\n\n1.预处理指令  \n\n2.全局声明  \n\n3.函数定义  \n\n##### 一个函数包括两个部分\n\n1.函数首部  \n\n2.函数体（声明部分/执行部分）  \n\n\n\n## 程序设计的任务\n\n1.问题分析：对问题进行分析，找出解决问题的规律  \n\n2.设计算法：设计出解题的方法和步骤  \n\n3.编写程序：根据得到的算法，用一种高级语言编写出源程序  \n\n4.对源程序进行编辑、编译和连接：得到可执行程序  \n\n5.运行程序，分析结果：运行可执行程序，得到运行结果  \n\n\n\n## 什么是算法\n\n算法从广义的角度来说，为解决一个问题而采取的方法和步骤就称为算法\n\n## 算法的特性\n\n1.有穷性  \n\n2.确定性  \n\n3.有零个或多个输入  \n\n4.有一个或多个输出\n\n5.有效性  \n\n## 流程图\n\n算法的表示分为一下三种种类：  \n\n1.传统型流程图  \n\n2.N-S流程图表示算法  \n\n3.用伪代码表示算法\n\n###### 三种基本结构\n\n1.顺序结构  \n\n2.选择结构  \n\n3.循环结构  \n\n\n\n循环结构又分为    \n\n1.当型（while）循环结构  \n\n2.直到型（until型）循环结构  \n\n\n\n以上三种基本结构又有一下共同特点:    \n\n1.只有一个入口  \n\n2.只有一个出口  \n\n## 结构化程序设计方法\n\n1.自顶向下  \n\n2.逐步细化  \n\n3.模块化设计  \n\n4.结构化编码  \n\n\n## 注意：这篇属于后面的篇章\n## 递归\n\n递归类似于函数的自身引用，如f(f(x))，就是自己重复调用自己，达到完成相同逻辑切重复的用途，在许多方面都有引用。  \n\n使用递归要注意一下两点：  \n\n1.自己得调用自己  \n\n2.要有结束条件  \n\n注意：第二点尤其重要，因为如果没有结束条件，就会陷入死循环，从而直到耗尽内存为止。  \n\n## 递归用途 汉诺塔\n\n一、汉诺塔（Tower of Hanoi），又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。  \n![hanoi](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/20210427074620328.gif)\n\n```c\n#include <stdio.h>\nvoid hanoi(int n,char x,char y,char z);\nvoid hanoi(int n,char x,char y,char z)\n{\n\tif(n==1)\n\t{\n\t\tprintf(\"%c-->%c\\n\",x,z);\n\t}\n\telse\n\t{\n\t\thanoi(n-1,x,z,y);\n\t\tprintf(\"%c-->%c\\n\",x,z);\n\t\thanoi(n-1,y,x,z);\n\t}\n}\nint main()\n{\n\tint n;\n\tprintf(\"请输入汉诺塔的层数：\");\n\tscanf(\"%d\",&n);\n\thanoi(n,'X','Y','Z');\n\treturn 0;\n}\n\n```\n\n下面是运行结果：  \n\n![运行](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-07-09%20%E4%B8%8B%E5%8D%8810.26.38.png)\n\n下面是代码逻辑图hanoi改了下，变成了hanio_step意思和逻辑不改变:  \n\n![逻辑](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/e51dd0cb01e844a49683da13e756e937.png)\n\n## 结构体\n一般用的变量互相独立，无内在联系，但有些数据有内在联系，成组出现，例如一个学生的学号，姓名，性别……  \n这种一般无法用数组存储，因为数组一个只能存放同一类型的数据，所以用户可以建立由不同类型数据组成的组合型的数据结构，它称为结构体。  \n\n声明一个结构体类型的一般形式为：  \n```\nstruct 结构体名\n{\n\t成员1;\n\t成员2；\n\t……\n\t成员n;\n};\n```\n例如：图书的标题、作者、价格、日期、\n```\nstruct Book\n{\n\tchar title[128];\n\tchar author[40];\n\tfloat price;\n\tunsigned int date;\n\tchar publisher[40];\n};\n```\n定义结构体变量时，可以在末尾;前定义变量名，也可以在main函数中定义\n区别是一个是全局变量，另一个则是局部变量。 \n成员声明具体如下：   \n```\n类型名 成员名;\n```\n\n## 访问结构体\n访问结构体成员需要用到.点运算符具体用法如下：  \n```\n结构体名.成员名\n```\n注意：每一个成员是结构体中的一个域。 \n## 初始化数组\n在末尾的名字后加等号用大括号括起来，用逗号分开，直接输入相应的值，具体如下:\n```\nstruct Book\n{       \n        char title[128];\n        char author[40];\n        float price; \n        unsigned int date;\n        char publisher[40];\n}book={\"name\",\"author\",49,2022/3/2,'k'};\n初始化指定成员，用点运算符，具体语句为：.成员名=值，\n\n## 结构体嵌套\n指在一个结构体里面有另一个结构体。 \n例如： \n```\nstruct 结构体名\n{\n\tstruct 结构体名 名称；\n}结构体名={初始化值};\n```\n## 访问嵌套结构体成员\n用点号运算符，一层一层用点号进入\n## 结构体数组\n定义方法如下：  \n方法1:  \n```\nstruct 结构体名称\n{\n\t结构体成员；\n}数组名[长度];\n```\n方法2:  \n```\nstruct 结构体名称\n{\n\t结构体成员;\n};\nstruct 结构体名称 数组名[长度];\n```\n在声明结构体后面改成数组形式\n\n## 初始化结构体数组\n同样用，号隔开录入  \n\n## 结构体指针 \nstruct Book * pt;  \npt=&book；  \n指向结构体的指针\n因为结构体变量名不是指向结构体地址的，所以取值必须使用取值运算符例如：pt=&book；  \n## 通过结构体指针访问结构体成员两种方法：\n1.\n(*结构体指针).成员名\n因为点运算符的优先级高于*所以需要使用小括号括起来\n2.\n结构体指针->成员名\n\n## 文件处理\n## 程序执行流程\n输入->处理->输出。 \n\n## 文本文件与二进制文件\n\n## 打开与关闭\n注意：在完成对一个文件的读写操作之后，你必须将其关闭。  \n打开文件使用函数是 fopen\nfopen 用于打开一个文件用于返回文件指针\nfopen 路径 打开模式\n关闭文件使用的函数是 \n\n\n","slug":"2022-07-06-C语言学习记录_day","published":1,"updated":"2022-11-01T09:01:51.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9y2zqrv0003oy9k4bwucyol","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;&emsp;今天，我买的计算机相关书籍回来了，正好将之前学漏的回炉重造下，关于学C还是学java我纠结了很久，最后还是打算先把C语言学完，然后在学java。现在从C语言最初的内容开始学，好了下面开始正式内容。</p>\n<h2 id=\"什么是计算机程序？\"><a href=\"#什么是计算机程序？\" class=\"headerlink\" title=\"什么是计算机程序？\"></a>什么是计算机程序？</h2><p>&emsp;&emsp;所谓程序，就是一组计算机能识别和执行的指令，每一条指令使计算机执行特定的操作。只要让计算机执行这个程序，计算机就会“自动地”执行各条指令。</p>\n<p>&emsp;&emsp;为了使计算机系统能实现各种功能，需要成千上万个程序组成。</p>\n<p>&emsp;    计算机的一切操作都是由程序控制的，离开程序，计算机将一事无成</p>\n<h2 id=\"计算机语言\"><a href=\"#计算机语言\" class=\"headerlink\" title=\"计算机语言\"></a>计算机语言</h2><p>&emsp;&emsp;所谓语言，就是一门沟通的工具，人与人有中文和英文等等，则机器与机器也有自己独特的语言。为了能使人与计算机交互，需要创造一种计算机和人都能识别的语言，这就是计算机语言。计算机语言的发展分为以下阶段：</p>\n<p>&emsp;&emsp;<strong>机器语言</strong>  计算机工作是基于二进制，从根本上讲计算机只能识别由0和1组成的指令。这种计算机能直接识别和接受的二进制代码称为机器指令。机器指令的集合就是该计算机的机器语言。</p>\n<p>&emsp;&emsp;<strong>符号语言</strong>  为了克服机器语言上的困难，人们创造了符号语言，它用一些英文字母和数字表示一个指令，它需要用一种称为汇编程序的软件把符号语言转化为机器指令。一般，一条符号语言的指令对应转换为一条机器指令。转换过程称为“代真”或“汇编”，因此，符号语言又称为汇编语言。</p>\n<p>&emsp;&emsp;<strong>高级语言</strong>  为了克服第几语言的缺陷，人们创造了高级语言，它很接近于人们习惯使用的自然语言和数学语言。程序中用到的语句和指令都是用英文单词表示，程序中所用的运算符和运算表达式和人们日常生活中所用到的数学式子差不多，更容易理解。</p>\n<p>&emsp;&emsp;当然，计算机也不能直接识别高级程序，业需要进行翻译，我们把刚刚编写的代码称为源程序，把转换得到的程序称为目标程序。</p>\n<p>&emsp;&emsp;并且高级语言经历了非结构化的语言、结构化语言、面向对象的语言这三种过程。</p>\n<h2 id=\"C语言的特点\"><a href=\"#C语言的特点\" class=\"headerlink\" title=\"C语言的特点\"></a>C语言的特点</h2><p>1.语言简洁、紧凑、使用方便、灵活。</p>\n<p>2.运算符丰富</p>\n<p>3.数据类型丰富</p>\n<p>4.具有结构化的到控制语句</p>\n<p>5.语法限制不太严格，程序设计自由度大</p>\n<p>6.C语言允许直接访问物理地址，能进行bit的操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作</p>\n<p>7.C语言编写的程序可移植性好</p>\n<p>8.生成的目标代码质量高，程序执行效率高</p>\n<h2 id=\"最简单的C语言程序\"><a href=\"#最简单的C语言程序\" class=\"headerlink\" title=\"最简单的C语言程序\"></a>最简单的C语言程序</h2><p>1.1要求在屏幕上输出一下一行信息。</p>\n<p>This is a C program.</p>\n<p>思路：在主函数中用printf函数原样输出该以上文字。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这是编译预处理指令</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//定义主函数</span></span><br><span class=\"line\">&#123;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//函数开始的标志</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;This is a C program.\\n&quot;</span>)\t\t<span class=\"comment\">//输出所指定的一行信息</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//函数执行完毕时返回函数值0</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//函数结束的标志</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"C语言的基本结构\"><a href=\"#C语言的基本结构\" class=\"headerlink\" title=\"C语言的基本结构\"></a>C语言的基本结构</h2><p>第一天写到最简单的打印字符型程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;This is a C program.\\n&quot;</span>)\t</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n<p>通过这个简单的例子，可以看到，一个C语言程序的结构有一下特点   </p>\n<p>1.一个程序由一个或多个源程序文件组成  </p>\n<p>2.函数事C程序的主要组成部分  </p>\n<p>3.一个函数包括两个部分  </p>\n<p>4.函数总是从main函数开始执行  </p>\n<p>5.程序中要求计算机完成的操作时由函数中的C语句完成的  </p>\n<p>6.在每个数据声明和语句的最后必须有一个分号  </p>\n<p>7.C语言本省不提供输入输出语句  </p>\n<p>8.程序应当包含注释  </p>\n<h6 id=\"一个源程序文件可以包括3个部分\"><a href=\"#一个源程序文件可以包括3个部分\" class=\"headerlink\" title=\"一个源程序文件可以包括3个部分\"></a>一个源程序文件可以包括3个部分</h6><p>1.预处理指令  </p>\n<p>2.全局声明  </p>\n<p>3.函数定义  </p>\n<h5 id=\"一个函数包括两个部分\"><a href=\"#一个函数包括两个部分\" class=\"headerlink\" title=\"一个函数包括两个部分\"></a>一个函数包括两个部分</h5><p>1.函数首部  </p>\n<p>2.函数体（声明部分/执行部分）  </p>\n<h2 id=\"程序设计的任务\"><a href=\"#程序设计的任务\" class=\"headerlink\" title=\"程序设计的任务\"></a>程序设计的任务</h2><p>1.问题分析：对问题进行分析，找出解决问题的规律  </p>\n<p>2.设计算法：设计出解题的方法和步骤  </p>\n<p>3.编写程序：根据得到的算法，用一种高级语言编写出源程序  </p>\n<p>4.对源程序进行编辑、编译和连接：得到可执行程序  </p>\n<p>5.运行程序，分析结果：运行可执行程序，得到运行结果  </p>\n<h2 id=\"什么是算法\"><a href=\"#什么是算法\" class=\"headerlink\" title=\"什么是算法\"></a>什么是算法</h2><p>算法从广义的角度来说，为解决一个问题而采取的方法和步骤就称为算法</p>\n<h2 id=\"算法的特性\"><a href=\"#算法的特性\" class=\"headerlink\" title=\"算法的特性\"></a>算法的特性</h2><p>1.有穷性  </p>\n<p>2.确定性  </p>\n<p>3.有零个或多个输入  </p>\n<p>4.有一个或多个输出</p>\n<p>5.有效性  </p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p>算法的表示分为一下三种种类：  </p>\n<p>1.传统型流程图  </p>\n<p>2.N-S流程图表示算法  </p>\n<p>3.用伪代码表示算法</p>\n<h6 id=\"三种基本结构\"><a href=\"#三种基本结构\" class=\"headerlink\" title=\"三种基本结构\"></a>三种基本结构</h6><p>1.顺序结构  </p>\n<p>2.选择结构  </p>\n<p>3.循环结构  </p>\n<p>循环结构又分为    </p>\n<p>1.当型（while）循环结构  </p>\n<p>2.直到型（until型）循环结构  </p>\n<p>以上三种基本结构又有一下共同特点:    </p>\n<p>1.只有一个入口  </p>\n<p>2.只有一个出口  </p>\n<h2 id=\"结构化程序设计方法\"><a href=\"#结构化程序设计方法\" class=\"headerlink\" title=\"结构化程序设计方法\"></a>结构化程序设计方法</h2><p>1.自顶向下  </p>\n<p>2.逐步细化  </p>\n<p>3.模块化设计  </p>\n<p>4.结构化编码  </p>\n<h2 id=\"注意：这篇属于后面的篇章\"><a href=\"#注意：这篇属于后面的篇章\" class=\"headerlink\" title=\"注意：这篇属于后面的篇章\"></a>注意：这篇属于后面的篇章</h2><h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归类似于函数的自身引用，如f(f(x))，就是自己重复调用自己，达到完成相同逻辑切重复的用途，在许多方面都有引用。  </p>\n<p>使用递归要注意一下两点：  </p>\n<p>1.自己得调用自己  </p>\n<p>2.要有结束条件  </p>\n<p>注意：第二点尤其重要，因为如果没有结束条件，就会陷入死循环，从而直到耗尽内存为止。  </p>\n<h2 id=\"递归用途-汉诺塔\"><a href=\"#递归用途-汉诺塔\" class=\"headerlink\" title=\"递归用途 汉诺塔\"></a>递归用途 汉诺塔</h2><p>一、汉诺塔（Tower of Hanoi），又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。<br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/20210427074620328.gif\" alt=\"hanoi\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hanoi</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">char</span> x,<span class=\"type\">char</span> y,<span class=\"type\">char</span> z)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hanoi</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">char</span> x,<span class=\"type\">char</span> y,<span class=\"type\">char</span> z)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c--&gt;%c\\n&quot;</span>,x,z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thanoi(n<span class=\"number\">-1</span>,x,z,y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c--&gt;%c\\n&quot;</span>,x,z);</span><br><span class=\"line\">\t\thanoi(n<span class=\"number\">-1</span>,y,x,z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入汉诺塔的层数：&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\thanoi(n,<span class=\"string\">&#x27;X&#x27;</span>,<span class=\"string\">&#x27;Y&#x27;</span>,<span class=\"string\">&#x27;Z&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下面是运行结果：  </p>\n<p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-07-09%20%E4%B8%8B%E5%8D%8810.26.38.png\" alt=\"运行\"></p>\n<p>下面是代码逻辑图hanoi改了下，变成了hanio_step意思和逻辑不改变:  </p>\n<p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/e51dd0cb01e844a49683da13e756e937.png\" alt=\"逻辑\"></p>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>一般用的变量互相独立，无内在联系，但有些数据有内在联系，成组出现，例如一个学生的学号，姓名，性别……<br>这种一般无法用数组存储，因为数组一个只能存放同一类型的数据，所以用户可以建立由不同类型数据组成的组合型的数据结构，它称为结构体。  </p>\n<p>声明一个结构体类型的一般形式为：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct 结构体名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t成员1;</span><br><span class=\"line\">\t成员2；</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t成员n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>例如：图书的标题、作者、价格、日期、</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Book</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar title[128];</span><br><span class=\"line\">\tchar author[40];</span><br><span class=\"line\">\tfloat price;</span><br><span class=\"line\">\tunsigned int date;</span><br><span class=\"line\">\tchar publisher[40];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>定义结构体变量时，可以在末尾;前定义变量名，也可以在main函数中定义<br>区别是一个是全局变量，另一个则是局部变量。<br>成员声明具体如下：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 成员名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问结构体\"><a href=\"#访问结构体\" class=\"headerlink\" title=\"访问结构体\"></a>访问结构体</h2><p>访问结构体成员需要用到.点运算符具体用法如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结构体名.成员名</span><br></pre></td></tr></table></figure>\n<p>注意：每一个成员是结构体中的一个域。 </p>\n<h2 id=\"初始化数组\"><a href=\"#初始化数组\" class=\"headerlink\" title=\"初始化数组\"></a>初始化数组</h2><p>在末尾的名字后加等号用大括号括起来，用逗号分开，直接输入相应的值，具体如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Book</span><br><span class=\"line\">&#123;       </span><br><span class=\"line\">        char title[128];</span><br><span class=\"line\">        char author[40];</span><br><span class=\"line\">        float price; </span><br><span class=\"line\">        unsigned int date;</span><br><span class=\"line\">        char publisher[40];</span><br><span class=\"line\">&#125;book=&#123;&quot;name&quot;,&quot;author&quot;,49,2022/3/2,&#x27;k&#x27;&#125;;</span><br><span class=\"line\">初始化指定成员，用点运算符，具体语句为：.成员名=值，</span><br><span class=\"line\"></span><br><span class=\"line\">## 结构体嵌套</span><br><span class=\"line\">指在一个结构体里面有另一个结构体。 </span><br><span class=\"line\">例如： </span><br></pre></td></tr></table></figure>\n<p>struct 结构体名<br>{<br>    struct 结构体名 名称；<br>}结构体名={初始化值};</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 访问嵌套结构体成员</span><br><span class=\"line\">用点号运算符，一层一层用点号进入</span><br><span class=\"line\">## 结构体数组</span><br><span class=\"line\">定义方法如下：  </span><br><span class=\"line\">方法1:  </span><br></pre></td></tr></table></figure>\n<p>struct 结构体名称<br>{<br>    结构体成员；<br>}数组名[长度];</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法2:  </span><br></pre></td></tr></table></figure>\n<p>struct 结构体名称<br>{<br>    结构体成员;<br>};<br>struct 结构体名称 数组名[长度];</p>\n<pre><code>在声明结构体后面改成数组形式\n\n## 初始化结构体数组\n同样用，号隔开录入  \n\n## 结构体指针 \nstruct Book * pt;  \npt=&amp;book；  \n指向结构体的指针\n因为结构体变量名不是指向结构体地址的，所以取值必须使用取值运算符例如：pt=&amp;book；  \n## 通过结构体指针访问结构体成员两种方法：\n1.\n(*结构体指针).成员名\n因为点运算符的优先级高于*所以需要使用小括号括起来\n2.\n结构体指针-&gt;成员名\n\n## 文件处理\n## 程序执行流程\n输入-&gt;处理-&gt;输出。 \n\n## 文本文件与二进制文件\n\n## 打开与关闭\n注意：在完成对一个文件的读写操作之后，你必须将其关闭。  \n打开文件使用函数是 fopen\nfopen 用于打开一个文件用于返回文件指针\nfopen 路径 打开模式\n关闭文件使用的函数是 \n\n</code></pre>\n","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;&emsp;今天，我买的计算机相关书籍回来了，正好将之前学漏的回炉重造下，关于学C还是学java我纠结了很久，最后还是打算先把C语言学完，然后在学java。现在从C语言最初的内容开始学，好了下面开始正式内容。</p>\n<h2 id=\"什么是计算机程序？\"><a href=\"#什么是计算机程序？\" class=\"headerlink\" title=\"什么是计算机程序？\"></a>什么是计算机程序？</h2><p>&emsp;&emsp;所谓程序，就是一组计算机能识别和执行的指令，每一条指令使计算机执行特定的操作。只要让计算机执行这个程序，计算机就会“自动地”执行各条指令。</p>\n<p>&emsp;&emsp;为了使计算机系统能实现各种功能，需要成千上万个程序组成。</p>\n<p>&emsp;    计算机的一切操作都是由程序控制的，离开程序，计算机将一事无成</p>\n<h2 id=\"计算机语言\"><a href=\"#计算机语言\" class=\"headerlink\" title=\"计算机语言\"></a>计算机语言</h2><p>&emsp;&emsp;所谓语言，就是一门沟通的工具，人与人有中文和英文等等，则机器与机器也有自己独特的语言。为了能使人与计算机交互，需要创造一种计算机和人都能识别的语言，这就是计算机语言。计算机语言的发展分为以下阶段：</p>\n<p>&emsp;&emsp;<strong>机器语言</strong>  计算机工作是基于二进制，从根本上讲计算机只能识别由0和1组成的指令。这种计算机能直接识别和接受的二进制代码称为机器指令。机器指令的集合就是该计算机的机器语言。</p>\n<p>&emsp;&emsp;<strong>符号语言</strong>  为了克服机器语言上的困难，人们创造了符号语言，它用一些英文字母和数字表示一个指令，它需要用一种称为汇编程序的软件把符号语言转化为机器指令。一般，一条符号语言的指令对应转换为一条机器指令。转换过程称为“代真”或“汇编”，因此，符号语言又称为汇编语言。</p>\n<p>&emsp;&emsp;<strong>高级语言</strong>  为了克服第几语言的缺陷，人们创造了高级语言，它很接近于人们习惯使用的自然语言和数学语言。程序中用到的语句和指令都是用英文单词表示，程序中所用的运算符和运算表达式和人们日常生活中所用到的数学式子差不多，更容易理解。</p>\n<p>&emsp;&emsp;当然，计算机也不能直接识别高级程序，业需要进行翻译，我们把刚刚编写的代码称为源程序，把转换得到的程序称为目标程序。</p>\n<p>&emsp;&emsp;并且高级语言经历了非结构化的语言、结构化语言、面向对象的语言这三种过程。</p>\n<h2 id=\"C语言的特点\"><a href=\"#C语言的特点\" class=\"headerlink\" title=\"C语言的特点\"></a>C语言的特点</h2><p>1.语言简洁、紧凑、使用方便、灵活。</p>\n<p>2.运算符丰富</p>\n<p>3.数据类型丰富</p>\n<p>4.具有结构化的到控制语句</p>\n<p>5.语法限制不太严格，程序设计自由度大</p>\n<p>6.C语言允许直接访问物理地址，能进行bit的操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作</p>\n<p>7.C语言编写的程序可移植性好</p>\n<p>8.生成的目标代码质量高，程序执行效率高</p>\n<h2 id=\"最简单的C语言程序\"><a href=\"#最简单的C语言程序\" class=\"headerlink\" title=\"最简单的C语言程序\"></a>最简单的C语言程序</h2><p>1.1要求在屏幕上输出一下一行信息。</p>\n<p>This is a C program.</p>\n<p>思路：在主函数中用printf函数原样输出该以上文字。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这是编译预处理指令</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//定义主函数</span></span><br><span class=\"line\">&#123;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//函数开始的标志</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;This is a C program.\\n&quot;</span>)\t\t<span class=\"comment\">//输出所指定的一行信息</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//函数执行完毕时返回函数值0</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//函数结束的标志</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"C语言的基本结构\"><a href=\"#C语言的基本结构\" class=\"headerlink\" title=\"C语言的基本结构\"></a>C语言的基本结构</h2><p>第一天写到最简单的打印字符型程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;This is a C program.\\n&quot;</span>)\t</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n\n<p>通过这个简单的例子，可以看到，一个C语言程序的结构有一下特点   </p>\n<p>1.一个程序由一个或多个源程序文件组成  </p>\n<p>2.函数事C程序的主要组成部分  </p>\n<p>3.一个函数包括两个部分  </p>\n<p>4.函数总是从main函数开始执行  </p>\n<p>5.程序中要求计算机完成的操作时由函数中的C语句完成的  </p>\n<p>6.在每个数据声明和语句的最后必须有一个分号  </p>\n<p>7.C语言本省不提供输入输出语句  </p>\n<p>8.程序应当包含注释  </p>\n<h6 id=\"一个源程序文件可以包括3个部分\"><a href=\"#一个源程序文件可以包括3个部分\" class=\"headerlink\" title=\"一个源程序文件可以包括3个部分\"></a>一个源程序文件可以包括3个部分</h6><p>1.预处理指令  </p>\n<p>2.全局声明  </p>\n<p>3.函数定义  </p>\n<h5 id=\"一个函数包括两个部分\"><a href=\"#一个函数包括两个部分\" class=\"headerlink\" title=\"一个函数包括两个部分\"></a>一个函数包括两个部分</h5><p>1.函数首部  </p>\n<p>2.函数体（声明部分/执行部分）  </p>\n<h2 id=\"程序设计的任务\"><a href=\"#程序设计的任务\" class=\"headerlink\" title=\"程序设计的任务\"></a>程序设计的任务</h2><p>1.问题分析：对问题进行分析，找出解决问题的规律  </p>\n<p>2.设计算法：设计出解题的方法和步骤  </p>\n<p>3.编写程序：根据得到的算法，用一种高级语言编写出源程序  </p>\n<p>4.对源程序进行编辑、编译和连接：得到可执行程序  </p>\n<p>5.运行程序，分析结果：运行可执行程序，得到运行结果  </p>\n<h2 id=\"什么是算法\"><a href=\"#什么是算法\" class=\"headerlink\" title=\"什么是算法\"></a>什么是算法</h2><p>算法从广义的角度来说，为解决一个问题而采取的方法和步骤就称为算法</p>\n<h2 id=\"算法的特性\"><a href=\"#算法的特性\" class=\"headerlink\" title=\"算法的特性\"></a>算法的特性</h2><p>1.有穷性  </p>\n<p>2.确定性  </p>\n<p>3.有零个或多个输入  </p>\n<p>4.有一个或多个输出</p>\n<p>5.有效性  </p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p>算法的表示分为一下三种种类：  </p>\n<p>1.传统型流程图  </p>\n<p>2.N-S流程图表示算法  </p>\n<p>3.用伪代码表示算法</p>\n<h6 id=\"三种基本结构\"><a href=\"#三种基本结构\" class=\"headerlink\" title=\"三种基本结构\"></a>三种基本结构</h6><p>1.顺序结构  </p>\n<p>2.选择结构  </p>\n<p>3.循环结构  </p>\n<p>循环结构又分为    </p>\n<p>1.当型（while）循环结构  </p>\n<p>2.直到型（until型）循环结构  </p>\n<p>以上三种基本结构又有一下共同特点:    </p>\n<p>1.只有一个入口  </p>\n<p>2.只有一个出口  </p>\n<h2 id=\"结构化程序设计方法\"><a href=\"#结构化程序设计方法\" class=\"headerlink\" title=\"结构化程序设计方法\"></a>结构化程序设计方法</h2><p>1.自顶向下  </p>\n<p>2.逐步细化  </p>\n<p>3.模块化设计  </p>\n<p>4.结构化编码  </p>\n<h2 id=\"注意：这篇属于后面的篇章\"><a href=\"#注意：这篇属于后面的篇章\" class=\"headerlink\" title=\"注意：这篇属于后面的篇章\"></a>注意：这篇属于后面的篇章</h2><h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归类似于函数的自身引用，如f(f(x))，就是自己重复调用自己，达到完成相同逻辑切重复的用途，在许多方面都有引用。  </p>\n<p>使用递归要注意一下两点：  </p>\n<p>1.自己得调用自己  </p>\n<p>2.要有结束条件  </p>\n<p>注意：第二点尤其重要，因为如果没有结束条件，就会陷入死循环，从而直到耗尽内存为止。  </p>\n<h2 id=\"递归用途-汉诺塔\"><a href=\"#递归用途-汉诺塔\" class=\"headerlink\" title=\"递归用途 汉诺塔\"></a>递归用途 汉诺塔</h2><p>一、汉诺塔（Tower of Hanoi），又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。<br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/20210427074620328.gif\" alt=\"hanoi\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hanoi</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">char</span> x,<span class=\"type\">char</span> y,<span class=\"type\">char</span> z)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hanoi</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">char</span> x,<span class=\"type\">char</span> y,<span class=\"type\">char</span> z)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c--&gt;%c\\n&quot;</span>,x,z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\thanoi(n<span class=\"number\">-1</span>,x,z,y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c--&gt;%c\\n&quot;</span>,x,z);</span><br><span class=\"line\">\t\thanoi(n<span class=\"number\">-1</span>,y,x,z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入汉诺塔的层数：&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\thanoi(n,<span class=\"string\">&#x27;X&#x27;</span>,<span class=\"string\">&#x27;Y&#x27;</span>,<span class=\"string\">&#x27;Z&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下面是运行结果：  </p>\n<p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-07-09%20%E4%B8%8B%E5%8D%8810.26.38.png\" alt=\"运行\"></p>\n<p>下面是代码逻辑图hanoi改了下，变成了hanio_step意思和逻辑不改变:  </p>\n<p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/e51dd0cb01e844a49683da13e756e937.png\" alt=\"逻辑\"></p>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>一般用的变量互相独立，无内在联系，但有些数据有内在联系，成组出现，例如一个学生的学号，姓名，性别……<br>这种一般无法用数组存储，因为数组一个只能存放同一类型的数据，所以用户可以建立由不同类型数据组成的组合型的数据结构，它称为结构体。  </p>\n<p>声明一个结构体类型的一般形式为：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct 结构体名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t成员1;</span><br><span class=\"line\">\t成员2；</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t成员n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>例如：图书的标题、作者、价格、日期、</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Book</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar title[128];</span><br><span class=\"line\">\tchar author[40];</span><br><span class=\"line\">\tfloat price;</span><br><span class=\"line\">\tunsigned int date;</span><br><span class=\"line\">\tchar publisher[40];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>定义结构体变量时，可以在末尾;前定义变量名，也可以在main函数中定义<br>区别是一个是全局变量，另一个则是局部变量。<br>成员声明具体如下：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 成员名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问结构体\"><a href=\"#访问结构体\" class=\"headerlink\" title=\"访问结构体\"></a>访问结构体</h2><p>访问结构体成员需要用到.点运算符具体用法如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结构体名.成员名</span><br></pre></td></tr></table></figure>\n<p>注意：每一个成员是结构体中的一个域。 </p>\n<h2 id=\"初始化数组\"><a href=\"#初始化数组\" class=\"headerlink\" title=\"初始化数组\"></a>初始化数组</h2><p>在末尾的名字后加等号用大括号括起来，用逗号分开，直接输入相应的值，具体如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Book</span><br><span class=\"line\">&#123;       </span><br><span class=\"line\">        char title[128];</span><br><span class=\"line\">        char author[40];</span><br><span class=\"line\">        float price; </span><br><span class=\"line\">        unsigned int date;</span><br><span class=\"line\">        char publisher[40];</span><br><span class=\"line\">&#125;book=&#123;&quot;name&quot;,&quot;author&quot;,49,2022/3/2,&#x27;k&#x27;&#125;;</span><br><span class=\"line\">初始化指定成员，用点运算符，具体语句为：.成员名=值，</span><br><span class=\"line\"></span><br><span class=\"line\">## 结构体嵌套</span><br><span class=\"line\">指在一个结构体里面有另一个结构体。 </span><br><span class=\"line\">例如： </span><br></pre></td></tr></table></figure>\n<p>struct 结构体名<br>{<br>    struct 结构体名 名称；<br>}结构体名={初始化值};</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 访问嵌套结构体成员</span><br><span class=\"line\">用点号运算符，一层一层用点号进入</span><br><span class=\"line\">## 结构体数组</span><br><span class=\"line\">定义方法如下：  </span><br><span class=\"line\">方法1:  </span><br></pre></td></tr></table></figure>\n<p>struct 结构体名称<br>{<br>    结构体成员；<br>}数组名[长度];</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法2:  </span><br></pre></td></tr></table></figure>\n<p>struct 结构体名称<br>{<br>    结构体成员;<br>};<br>struct 结构体名称 数组名[长度];</p>\n<pre><code>在声明结构体后面改成数组形式\n\n## 初始化结构体数组\n同样用，号隔开录入  \n\n## 结构体指针 \nstruct Book * pt;  \npt=&amp;book；  \n指向结构体的指针\n因为结构体变量名不是指向结构体地址的，所以取值必须使用取值运算符例如：pt=&amp;book；  \n## 通过结构体指针访问结构体成员两种方法：\n1.\n(*结构体指针).成员名\n因为点运算符的优先级高于*所以需要使用小括号括起来\n2.\n结构体指针-&gt;成员名\n\n## 文件处理\n## 程序执行流程\n输入-&gt;处理-&gt;输出。 \n\n## 文本文件与二进制文件\n\n## 打开与关闭\n注意：在完成对一个文件的读写操作之后，你必须将其关闭。  \n打开文件使用函数是 fopen\nfopen 用于打开一个文件用于返回文件指针\nfopen 路径 打开模式\n关闭文件使用的函数是 \n\n</code></pre>\n"},{"title":"Linux常用命令","date":"2022-07-06T12:22:22.000Z","_content":"\n## Linux命令格式\n命令 [选项] [参数]\n\n## 系统管理与维护篇\n1.pwd命令  \n用于显示当前目录  \n\n2.cd命令  \n切换当前目录  \n```\n~或空格    切换到当前登陆用户的主目录\n~用户名    切换到指定用户的主目录\n-切换到之前的工作目录\n.代表当前目录\n..代表上一级目录\n```\n\n3.ls命令  \n用于列出当前目录或指定目录中的内容  \n\n4.date和cal命令  \n用于显示当前系统时间和日期  \n\n5.su和passwd命令    \nsu用户切换用户  \npasswd用于修改用户密码  \n\n6.man命令  \n用于显示命令帮助手册  \n\n7.who命令和w命令  \nwho用于查看当前系统的用户有哪些  \nw命令与who类似，但是主要用于显示登陆到系统的用户情况  \n\n8.uname命令  \n用于显示操作系统信息  \n\n9.last命令  \n用于查看当前和过去登陆系统用户的相关信息  \n\n10.uptime和free命令  \nuptime用于显示系统已经运行的时间、当前用户登陆的用户数量和系统评价负载。  \nfree用于显示系统内存的状态，包括系统的物理内存、虚拟内存（swap）和系统缓存的使用情况  \n\n11.dmesg命令  \n用于显示开机信息，常用语查看系统的硬件信息。  \n\n12.ps和top命令  \nps用于监控进程  \ntop用于动态地察看进程的运行状态。  \n\n## 文件管理篇\n1.mkdir和touch命令  \n分别用于新建文件夹和新建文件  \n\n2.rm和rmdir命令  \nrm用于永久删除文件或目录  \nrmdir用户删除空目录  \n\n3.cat命令  \n用来查看文件中的内容  \n\n4.grep命令  \n能够在一个或多个文件中搜索某一特定的字符模式，也称为正则表达式  \n\n5.more命令  \n可以使文件中的内容分页显示  \n\n6.file命令  \n可以通过查看文件的头部信息来识别文件的类型，同时还可以用来辨别文件的编码格式  \n\n7.cp命令  \n用来复制文件或目录  \n \n8.mv命令  \n用于在不同目录之间移动文件或目录  \n \n9.find命令  \n用来查找文件和目录  \n\n## 压缩与解压缩篇\n\n1.zip/unzip  \n\n2.gzip/gunzip  \n\n3.bzip2/bunzip2  \n\n4.tar  \n\n## 磁盘管理与维护命令篇\n\n1.df命令  \n用于显示Linux系统中各文件系统的硬盘使用情况  \n\n2.du命令  \n用于显示某个特定目录的磁盘使用情况，同时还可以片段系统上某个目录下是否有超大文件。  \n\n3.fsck命令  \n用于检查文件系统并尝试修复出现的错误  \n\n","source":"_posts/2022-07-06_Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ndate: 2022-07-06 20:22:22\ntags: [Linux]\n---\n\n## Linux命令格式\n命令 [选项] [参数]\n\n## 系统管理与维护篇\n1.pwd命令  \n用于显示当前目录  \n\n2.cd命令  \n切换当前目录  \n```\n~或空格    切换到当前登陆用户的主目录\n~用户名    切换到指定用户的主目录\n-切换到之前的工作目录\n.代表当前目录\n..代表上一级目录\n```\n\n3.ls命令  \n用于列出当前目录或指定目录中的内容  \n\n4.date和cal命令  \n用于显示当前系统时间和日期  \n\n5.su和passwd命令    \nsu用户切换用户  \npasswd用于修改用户密码  \n\n6.man命令  \n用于显示命令帮助手册  \n\n7.who命令和w命令  \nwho用于查看当前系统的用户有哪些  \nw命令与who类似，但是主要用于显示登陆到系统的用户情况  \n\n8.uname命令  \n用于显示操作系统信息  \n\n9.last命令  \n用于查看当前和过去登陆系统用户的相关信息  \n\n10.uptime和free命令  \nuptime用于显示系统已经运行的时间、当前用户登陆的用户数量和系统评价负载。  \nfree用于显示系统内存的状态，包括系统的物理内存、虚拟内存（swap）和系统缓存的使用情况  \n\n11.dmesg命令  \n用于显示开机信息，常用语查看系统的硬件信息。  \n\n12.ps和top命令  \nps用于监控进程  \ntop用于动态地察看进程的运行状态。  \n\n## 文件管理篇\n1.mkdir和touch命令  \n分别用于新建文件夹和新建文件  \n\n2.rm和rmdir命令  \nrm用于永久删除文件或目录  \nrmdir用户删除空目录  \n\n3.cat命令  \n用来查看文件中的内容  \n\n4.grep命令  \n能够在一个或多个文件中搜索某一特定的字符模式，也称为正则表达式  \n\n5.more命令  \n可以使文件中的内容分页显示  \n\n6.file命令  \n可以通过查看文件的头部信息来识别文件的类型，同时还可以用来辨别文件的编码格式  \n\n7.cp命令  \n用来复制文件或目录  \n \n8.mv命令  \n用于在不同目录之间移动文件或目录  \n \n9.find命令  \n用来查找文件和目录  \n\n## 压缩与解压缩篇\n\n1.zip/unzip  \n\n2.gzip/gunzip  \n\n3.bzip2/bunzip2  \n\n4.tar  \n\n## 磁盘管理与维护命令篇\n\n1.df命令  \n用于显示Linux系统中各文件系统的硬盘使用情况  \n\n2.du命令  \n用于显示某个特定目录的磁盘使用情况，同时还可以片段系统上某个目录下是否有超大文件。  \n\n3.fsck命令  \n用于检查文件系统并尝试修复出现的错误  \n\n","slug":"2022-07-06_Linux常用命令","published":1,"updated":"2022-10-28T10:55:14.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9y2zqry0006oy9kavoz8pxd","content":"<h2 id=\"Linux命令格式\"><a href=\"#Linux命令格式\" class=\"headerlink\" title=\"Linux命令格式\"></a>Linux命令格式</h2><p>命令 [选项] [参数]</p>\n<h2 id=\"系统管理与维护篇\"><a href=\"#系统管理与维护篇\" class=\"headerlink\" title=\"系统管理与维护篇\"></a>系统管理与维护篇</h2><p>1.pwd命令<br>用于显示当前目录  </p>\n<p>2.cd命令<br>切换当前目录  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~或空格    切换到当前登陆用户的主目录</span><br><span class=\"line\">~用户名    切换到指定用户的主目录</span><br><span class=\"line\">-切换到之前的工作目录</span><br><span class=\"line\">.代表当前目录</span><br><span class=\"line\">..代表上一级目录</span><br></pre></td></tr></table></figure>\n\n<p>3.ls命令<br>用于列出当前目录或指定目录中的内容  </p>\n<p>4.date和cal命令<br>用于显示当前系统时间和日期  </p>\n<p>5.su和passwd命令<br>su用户切换用户<br>passwd用于修改用户密码  </p>\n<p>6.man命令<br>用于显示命令帮助手册  </p>\n<p>7.who命令和w命令<br>who用于查看当前系统的用户有哪些<br>w命令与who类似，但是主要用于显示登陆到系统的用户情况  </p>\n<p>8.uname命令<br>用于显示操作系统信息  </p>\n<p>9.last命令<br>用于查看当前和过去登陆系统用户的相关信息  </p>\n<p>10.uptime和free命令<br>uptime用于显示系统已经运行的时间、当前用户登陆的用户数量和系统评价负载。<br>free用于显示系统内存的状态，包括系统的物理内存、虚拟内存（swap）和系统缓存的使用情况  </p>\n<p>11.dmesg命令<br>用于显示开机信息，常用语查看系统的硬件信息。  </p>\n<p>12.ps和top命令<br>ps用于监控进程<br>top用于动态地察看进程的运行状态。  </p>\n<h2 id=\"文件管理篇\"><a href=\"#文件管理篇\" class=\"headerlink\" title=\"文件管理篇\"></a>文件管理篇</h2><p>1.mkdir和touch命令<br>分别用于新建文件夹和新建文件  </p>\n<p>2.rm和rmdir命令<br>rm用于永久删除文件或目录<br>rmdir用户删除空目录  </p>\n<p>3.cat命令<br>用来查看文件中的内容  </p>\n<p>4.grep命令<br>能够在一个或多个文件中搜索某一特定的字符模式，也称为正则表达式  </p>\n<p>5.more命令<br>可以使文件中的内容分页显示  </p>\n<p>6.file命令<br>可以通过查看文件的头部信息来识别文件的类型，同时还可以用来辨别文件的编码格式  </p>\n<p>7.cp命令<br>用来复制文件或目录  </p>\n<p>8.mv命令<br>用于在不同目录之间移动文件或目录  </p>\n<p>9.find命令<br>用来查找文件和目录  </p>\n<h2 id=\"压缩与解压缩篇\"><a href=\"#压缩与解压缩篇\" class=\"headerlink\" title=\"压缩与解压缩篇\"></a>压缩与解压缩篇</h2><p>1.zip/unzip  </p>\n<p>2.gzip/gunzip  </p>\n<p>3.bzip2/bunzip2  </p>\n<p>4.tar  </p>\n<h2 id=\"磁盘管理与维护命令篇\"><a href=\"#磁盘管理与维护命令篇\" class=\"headerlink\" title=\"磁盘管理与维护命令篇\"></a>磁盘管理与维护命令篇</h2><p>1.df命令<br>用于显示Linux系统中各文件系统的硬盘使用情况  </p>\n<p>2.du命令<br>用于显示某个特定目录的磁盘使用情况，同时还可以片段系统上某个目录下是否有超大文件。  </p>\n<p>3.fsck命令<br>用于检查文件系统并尝试修复出现的错误  </p>\n","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":"<h2 id=\"Linux命令格式\"><a href=\"#Linux命令格式\" class=\"headerlink\" title=\"Linux命令格式\"></a>Linux命令格式</h2><p>命令 [选项] [参数]</p>\n<h2 id=\"系统管理与维护篇\"><a href=\"#系统管理与维护篇\" class=\"headerlink\" title=\"系统管理与维护篇\"></a>系统管理与维护篇</h2><p>1.pwd命令<br>用于显示当前目录  </p>\n<p>2.cd命令<br>切换当前目录  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~或空格    切换到当前登陆用户的主目录</span><br><span class=\"line\">~用户名    切换到指定用户的主目录</span><br><span class=\"line\">-切换到之前的工作目录</span><br><span class=\"line\">.代表当前目录</span><br><span class=\"line\">..代表上一级目录</span><br></pre></td></tr></table></figure>\n\n<p>3.ls命令<br>用于列出当前目录或指定目录中的内容  </p>\n<p>4.date和cal命令<br>用于显示当前系统时间和日期  </p>\n<p>5.su和passwd命令<br>su用户切换用户<br>passwd用于修改用户密码  </p>\n<p>6.man命令<br>用于显示命令帮助手册  </p>\n<p>7.who命令和w命令<br>who用于查看当前系统的用户有哪些<br>w命令与who类似，但是主要用于显示登陆到系统的用户情况  </p>\n<p>8.uname命令<br>用于显示操作系统信息  </p>\n<p>9.last命令<br>用于查看当前和过去登陆系统用户的相关信息  </p>\n<p>10.uptime和free命令<br>uptime用于显示系统已经运行的时间、当前用户登陆的用户数量和系统评价负载。<br>free用于显示系统内存的状态，包括系统的物理内存、虚拟内存（swap）和系统缓存的使用情况  </p>\n<p>11.dmesg命令<br>用于显示开机信息，常用语查看系统的硬件信息。  </p>\n<p>12.ps和top命令<br>ps用于监控进程<br>top用于动态地察看进程的运行状态。  </p>\n<h2 id=\"文件管理篇\"><a href=\"#文件管理篇\" class=\"headerlink\" title=\"文件管理篇\"></a>文件管理篇</h2><p>1.mkdir和touch命令<br>分别用于新建文件夹和新建文件  </p>\n<p>2.rm和rmdir命令<br>rm用于永久删除文件或目录<br>rmdir用户删除空目录  </p>\n<p>3.cat命令<br>用来查看文件中的内容  </p>\n<p>4.grep命令<br>能够在一个或多个文件中搜索某一特定的字符模式，也称为正则表达式  </p>\n<p>5.more命令<br>可以使文件中的内容分页显示  </p>\n<p>6.file命令<br>可以通过查看文件的头部信息来识别文件的类型，同时还可以用来辨别文件的编码格式  </p>\n<p>7.cp命令<br>用来复制文件或目录  </p>\n<p>8.mv命令<br>用于在不同目录之间移动文件或目录  </p>\n<p>9.find命令<br>用来查找文件和目录  </p>\n<h2 id=\"压缩与解压缩篇\"><a href=\"#压缩与解压缩篇\" class=\"headerlink\" title=\"压缩与解压缩篇\"></a>压缩与解压缩篇</h2><p>1.zip/unzip  </p>\n<p>2.gzip/gunzip  </p>\n<p>3.bzip2/bunzip2  </p>\n<p>4.tar  </p>\n<h2 id=\"磁盘管理与维护命令篇\"><a href=\"#磁盘管理与维护命令篇\" class=\"headerlink\" title=\"磁盘管理与维护命令篇\"></a>磁盘管理与维护命令篇</h2><p>1.df命令<br>用于显示Linux系统中各文件系统的硬盘使用情况  </p>\n<p>2.du命令<br>用于显示某个特定目录的磁盘使用情况，同时还可以片段系统上某个目录下是否有超大文件。  </p>\n<p>3.fsck命令<br>用于检查文件系统并尝试修复出现的错误  </p>\n"},{"title":"初识Linux","date":"2022-07-06T12:23:23.000Z","_content":"\n&emsp;&emsp;操作系统  \n&emsp;&emsp;操作系统时管理计算机硬件与软件资源的计算机程序，它能够合理地组织计算机工作的流程，是用户与计算机的接口，同时也提供了一个能够让用户与系统交互的操作界面。  \n操作系统有一下4个特征：  \n&emsp;&emsp;1.并发  \n&emsp;&emsp;&emsp;&emsp;并发是指两个或多个事件在同一时间间隔内发生。  \n&emsp;&emsp;2.共享  \n&emsp;&emsp;&emsp;&emsp;共享是指系统中的资源可供内存中多个并发执行的进程共同使用。  \n&emsp;&emsp;&emsp;&emsp;共享又分为以下两种方式：  \n&emsp;&emsp;2.1、互斥共享方式：在一段时间内只允许一个进程访问该资源。  \n&emsp;&emsp;2.2、同时访问方式：如：磁盘设备  \n&emsp;&emsp;3.虚拟  \n&emsp;&emsp;&emsp;&emsp;虚拟是指把一个物理上的实体变成为若干个逻辑上对应物  \n&emsp;&emsp;4.异步  \n&emsp;&emsp;&emsp;&emsp;在多道程序环境下，允许多个程序并发执行，但由于资源等因素限制，进程的执行并不是一直执行下去的，而是断断续续，内存中的每个进程会在什么时间开始执行、暂停，没道程序总共需要多少时间才能完成，这些都是以不可预知的速度向前推进，这就是进程的异步性。  \n注意：操作系统最基本的特征是并发和共享，两者互为存在条件。  \n\n## 二、Unix概述  \n&emsp;&emsp;Unix是一个计算机操作系统用来专门协调、管理和控制计算机硬件和软件资源的控制程序。Unix是一个多用户和多线程的操作系统：多用户表示同一时刻可以有多个用户同时使用Unix操作系统，并且在他们各自做各自的任务时互不干扰：多线程表示任何用户在同一时间可以在Unix操作系统上运行多个程序。  \n1.Unix操作系统由 内核、Shell和程序组成  \n&emsp;&emsp;1.1、内核：内核是操作系统的核心部分，它一方面可以为程序分配时间和内存，另一方面通过处理文件的存储和通信以相应系统调用。  \n&emsp;&emsp;1.2、Shell：Shell属于用户和内核之间的连接接口。  \n&emsp;&emsp;1.3、程序：Shell是命令行解释器，这些命令也是程序的一部分，其中还包括文件和进程。  \n2.Unix操作系统的优点  \n&emsp;&emsp;2.1、多用户、多线程的操作系统并支持多种处理器的架构模式  \n&emsp;&emsp;2.2、使用简单编程语言使系统易于理解、易于修改、同时还会有各种编程语言的解释器和编译器。  \n&emsp;&emsp;2.3、使用功能强大的可编程的Shell语言，使用户界面美观大方，简洁明了。  \n&emsp;&emsp;2.4、开源性。  \n\n## Linux系统结构结构\n&emsp;&emsp;计算机的硬件资源全部由内核（Kernel）来进行管理，内核需要管理的事项包括内存管理、进程管理、文件系统、设备驱动程序、网络结构5大部分组成  \n1.内存管理：  \n&emsp;&emsp;1.1、进程对内存的使用      \n &emsp;&emsp;&emsp;&emsp;要执行程序都必须要占有一定数量的内存。linux采用虚拟内存管理技术，这样可以使每个进程都有各自互不干扰的进程地址存储空间。虚拟地址不仅能保护操作系统，而且方便用户程序使用比实际物理内存较大的地址空间。  \n&emsp;&emsp;一个普通的进程包括代码段、数据段、BSS段、堆和栈5个不同的数据段。  \n&emsp;&emsp;       （1）、代码段：主要用来存放可执行文件的操作指令。  \n&emsp;&emsp;  （2）、数据段：数据段用来存放可执行文件中已经出实话的全局变量，也就是存放程序静态分配的变量和全局变量。  \n       &emsp;&emsp; （3）、BSS段：BSS段包含了程序中为初始化的全局变量，在内存中BSS段全部置为“0”。  \n       &emsp;&emsp; （4）、堆：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态地扩张和缩减。  \n      &emsp;&emsp;  （5）、栈：栈是用户为了存放程序而临时创建的一个局部变量，栈有先进先出的特点，所以栈可以用来保存或恢复调用现场。因此可以把堆栈当作一个寄存、交换临时数据的内存区。  \n&emsp;&emsp;1.2、物理内存  \n&emsp;&emsp;物理内存是系统硬件提供的真实内存大小，除了物理内存之外，在Linux中还有一个虚拟内存，是为了满足物理内存不足而存在的，被称为交换空间。  \n&emsp;&emsp;Linux系统将内存划分为容易处理的“内存页”  \n&emsp;&emsp;注意：Linux系统内核的内存管理采取的是分页存取机制，为了保证物理内存能够得到充分的利用，内核会在适当的时候将物理内存中不经常使用的段数据块信息自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。  \n2.进程管理  \n    进程是在自身的虚拟地址空间运行的一个独立的程序，从操作系统的角度来看，所有在操作系统上运行的东西，都可以称为一个程序。  \n    进程的分类：  \n&emsp;&emsp;（1）系统进程：可以执行内存资源分配和进程切换等管理工作  \n&emsp;&emsp; （2）用户进程：通过执行用户程序、应用程序或内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。  \n&emsp;&emsp;&emsp;&emsp;  针对用户进程可分为：交互进程、批处理进程和守护进程3种。  \n&emsp;&emsp;&emsp;&emsp;         交互进程：由一个Shell终端启动的进程  \n&emsp;&emsp;&emsp;&emsp;        批处理进程：该进程是一个进程集合，负责按顺序启动其他的程序。  \n&emsp;&emsp;&emsp;&emsp;        守护进程：守护进程是一只运行的一种进程。独立于终端，并周期性地执行某种任务或等待处理某些发生的事件。  \n&emsp;&emsp;（3）进程的状态：  \n&emsp;&emsp;&emsp;&emsp;可运行状态：正在运行或正准备运行。  \n&emsp;&emsp;&emsp;&emsp;可中断的等待状态：处于阻塞状态，达到条件就运行。  \n&emsp;&emsp;&emsp;&emsp;不中断的等待状态：与可中断等待状态类似，但这个进程对进程的信号不做回应。  \n&emsp;&emsp;&emsp;&emsp;僵死状态：每个进程在结束后都会处于僵死状态，等待父进程调用进而释放资源，处于该状态的进程已结束。但是它的父进程还没有释放其系统资源。  \n&emsp;&emsp;&emsp;&emsp;暂停状态：表明此时的进程暂时停止，来接受某种特殊信号。  \n3.文件系统  \n&emsp;&emsp; Linux对各种文件系统支持是通过VFS的组件实现的，也就是虚拟文件系统。  \n    虚拟文件系统是Linux内核中国呢非常有用的一个方面，因为它为文件系统提供了一个通用的接口抽象，即VFS在用户和文件系统之间提供了一个交换层  \n4.设备驱动程序  \n&emsp;&emsp;设备驱动程序是Linux内核的主要部分。设备的分类如下：  \n&emsp;&emsp;&emsp;&emsp;字符设备：字符设备是能够像文件一样被访问的设备，由字符设备驱动程序来实现这种特点。  \n&emsp;&emsp;&emsp;&emsp;块设备：块设备也是通过设备节点来访问。块设备上能够过容纳文件系统。  \n&emsp;&emsp;&emsp;&emsp;网络设备：网络设备不同于字符设备和块设备，它是面向报文的而不是面向流的，它不支持随机访问，业没有请求缓冲区。  \n5.网络接口  \n&emsp;&emsp;网络接口可分为网络协议和网络驱动程序。网络协议负责实现每一种可能的网络传输协议。  \n&emsp;&emsp;&emsp;&emsp;5.1网络接口的命名  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;lo：local的缩写，一般指本地接口\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;eth0：ethernt的缩写一般用于以太网接口  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;wifi0:wifi是无限局域网，一般用于无限网接口。  \n&emsp;&emsp;5.2网络接口的工作  \n&emsp;&emsp;&emsp;&emsp;网络接口是用来发送和接受数据包的基本设备。系统中的所有网络接口组成一个链状结构，应用层的程序使用网络接口时按名称调用。  \n&emsp;&emsp;5.3虚拟网络接口  \n&emsp;&emsp;&emsp;&emsp;lo是最常见的接口之一，虚拟网络接口并不真实的从外界接受和发送数据包，而是在系统内部接受和发送数据包，因此虚拟网络接口不需要驱动程序。  \n\n## Linux目录及功能\n```markdown\n/                   虚拟系统的根目录，这里一般不存文件\n/bin                二进制目录，用于存放用户级的GNU工具，如：cat\n/boot               启动目录，存放Linux操作系统的内核和系统启动时所需要使用的文件\n/dev                设备目录，创建设备节点，存放计算机中所有的设备，包括硬件\n/etc                系统配置文件目录，只有root用户可以修改该文件\n/home               主目录，创建用户目录\n/lib                库目录，存放系统和应用程序的库文件\n/media              媒体目录，可移动媒体设备的常用挂载点\n/mnt                挂载目录，另一个可移动媒体设备的常用挂载点\n/opt                可选目录，常用于存放第三方软件包和数据文件\n/proc               进程目录，常在内存中，不占用任何磁盘空间，存放现有硬件及当前进程的相关信息\n/root               root用户的主目录\n/sbin               系统二进制目录，存放许多GNU管理级工具\n/run                运行目录，存放系统运行时的运行数据\n/srv                服务目录，存放的是所有与服务器相关的服务，即一些服务启动之后，这些服务需要访问的目录\n/sys                系统目录，存放系统硬件信息的相关文件\n/tmp                临时目录，普通用户或程序可以将临时文件存入该目录以方便与其他用户或程序交互信息。该目录所有的用户都可以进行访问，因此，重要的信息不因该存放在该目录中\n/user               用户二进制目录，存放系统的应用程序和与命令相关的系统数据，其中包括系统的一些函数库及图形界面所需要点文件等\n/var                可变目录，存放的是系统运行中经常变化的文件，如log日志文件等\n```\n","source":"_posts/2022-07-06_初识Linux .md","raw":"---\ntitle: 初识Linux\ndate: 2022-07-06 20:23:23\ntags: [Linux]\n---\n\n&emsp;&emsp;操作系统  \n&emsp;&emsp;操作系统时管理计算机硬件与软件资源的计算机程序，它能够合理地组织计算机工作的流程，是用户与计算机的接口，同时也提供了一个能够让用户与系统交互的操作界面。  \n操作系统有一下4个特征：  \n&emsp;&emsp;1.并发  \n&emsp;&emsp;&emsp;&emsp;并发是指两个或多个事件在同一时间间隔内发生。  \n&emsp;&emsp;2.共享  \n&emsp;&emsp;&emsp;&emsp;共享是指系统中的资源可供内存中多个并发执行的进程共同使用。  \n&emsp;&emsp;&emsp;&emsp;共享又分为以下两种方式：  \n&emsp;&emsp;2.1、互斥共享方式：在一段时间内只允许一个进程访问该资源。  \n&emsp;&emsp;2.2、同时访问方式：如：磁盘设备  \n&emsp;&emsp;3.虚拟  \n&emsp;&emsp;&emsp;&emsp;虚拟是指把一个物理上的实体变成为若干个逻辑上对应物  \n&emsp;&emsp;4.异步  \n&emsp;&emsp;&emsp;&emsp;在多道程序环境下，允许多个程序并发执行，但由于资源等因素限制，进程的执行并不是一直执行下去的，而是断断续续，内存中的每个进程会在什么时间开始执行、暂停，没道程序总共需要多少时间才能完成，这些都是以不可预知的速度向前推进，这就是进程的异步性。  \n注意：操作系统最基本的特征是并发和共享，两者互为存在条件。  \n\n## 二、Unix概述  \n&emsp;&emsp;Unix是一个计算机操作系统用来专门协调、管理和控制计算机硬件和软件资源的控制程序。Unix是一个多用户和多线程的操作系统：多用户表示同一时刻可以有多个用户同时使用Unix操作系统，并且在他们各自做各自的任务时互不干扰：多线程表示任何用户在同一时间可以在Unix操作系统上运行多个程序。  \n1.Unix操作系统由 内核、Shell和程序组成  \n&emsp;&emsp;1.1、内核：内核是操作系统的核心部分，它一方面可以为程序分配时间和内存，另一方面通过处理文件的存储和通信以相应系统调用。  \n&emsp;&emsp;1.2、Shell：Shell属于用户和内核之间的连接接口。  \n&emsp;&emsp;1.3、程序：Shell是命令行解释器，这些命令也是程序的一部分，其中还包括文件和进程。  \n2.Unix操作系统的优点  \n&emsp;&emsp;2.1、多用户、多线程的操作系统并支持多种处理器的架构模式  \n&emsp;&emsp;2.2、使用简单编程语言使系统易于理解、易于修改、同时还会有各种编程语言的解释器和编译器。  \n&emsp;&emsp;2.3、使用功能强大的可编程的Shell语言，使用户界面美观大方，简洁明了。  \n&emsp;&emsp;2.4、开源性。  \n\n## Linux系统结构结构\n&emsp;&emsp;计算机的硬件资源全部由内核（Kernel）来进行管理，内核需要管理的事项包括内存管理、进程管理、文件系统、设备驱动程序、网络结构5大部分组成  \n1.内存管理：  \n&emsp;&emsp;1.1、进程对内存的使用      \n &emsp;&emsp;&emsp;&emsp;要执行程序都必须要占有一定数量的内存。linux采用虚拟内存管理技术，这样可以使每个进程都有各自互不干扰的进程地址存储空间。虚拟地址不仅能保护操作系统，而且方便用户程序使用比实际物理内存较大的地址空间。  \n&emsp;&emsp;一个普通的进程包括代码段、数据段、BSS段、堆和栈5个不同的数据段。  \n&emsp;&emsp;       （1）、代码段：主要用来存放可执行文件的操作指令。  \n&emsp;&emsp;  （2）、数据段：数据段用来存放可执行文件中已经出实话的全局变量，也就是存放程序静态分配的变量和全局变量。  \n       &emsp;&emsp; （3）、BSS段：BSS段包含了程序中为初始化的全局变量，在内存中BSS段全部置为“0”。  \n       &emsp;&emsp; （4）、堆：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态地扩张和缩减。  \n      &emsp;&emsp;  （5）、栈：栈是用户为了存放程序而临时创建的一个局部变量，栈有先进先出的特点，所以栈可以用来保存或恢复调用现场。因此可以把堆栈当作一个寄存、交换临时数据的内存区。  \n&emsp;&emsp;1.2、物理内存  \n&emsp;&emsp;物理内存是系统硬件提供的真实内存大小，除了物理内存之外，在Linux中还有一个虚拟内存，是为了满足物理内存不足而存在的，被称为交换空间。  \n&emsp;&emsp;Linux系统将内存划分为容易处理的“内存页”  \n&emsp;&emsp;注意：Linux系统内核的内存管理采取的是分页存取机制，为了保证物理内存能够得到充分的利用，内核会在适当的时候将物理内存中不经常使用的段数据块信息自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。  \n2.进程管理  \n    进程是在自身的虚拟地址空间运行的一个独立的程序，从操作系统的角度来看，所有在操作系统上运行的东西，都可以称为一个程序。  \n    进程的分类：  \n&emsp;&emsp;（1）系统进程：可以执行内存资源分配和进程切换等管理工作  \n&emsp;&emsp; （2）用户进程：通过执行用户程序、应用程序或内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。  \n&emsp;&emsp;&emsp;&emsp;  针对用户进程可分为：交互进程、批处理进程和守护进程3种。  \n&emsp;&emsp;&emsp;&emsp;         交互进程：由一个Shell终端启动的进程  \n&emsp;&emsp;&emsp;&emsp;        批处理进程：该进程是一个进程集合，负责按顺序启动其他的程序。  \n&emsp;&emsp;&emsp;&emsp;        守护进程：守护进程是一只运行的一种进程。独立于终端，并周期性地执行某种任务或等待处理某些发生的事件。  \n&emsp;&emsp;（3）进程的状态：  \n&emsp;&emsp;&emsp;&emsp;可运行状态：正在运行或正准备运行。  \n&emsp;&emsp;&emsp;&emsp;可中断的等待状态：处于阻塞状态，达到条件就运行。  \n&emsp;&emsp;&emsp;&emsp;不中断的等待状态：与可中断等待状态类似，但这个进程对进程的信号不做回应。  \n&emsp;&emsp;&emsp;&emsp;僵死状态：每个进程在结束后都会处于僵死状态，等待父进程调用进而释放资源，处于该状态的进程已结束。但是它的父进程还没有释放其系统资源。  \n&emsp;&emsp;&emsp;&emsp;暂停状态：表明此时的进程暂时停止，来接受某种特殊信号。  \n3.文件系统  \n&emsp;&emsp; Linux对各种文件系统支持是通过VFS的组件实现的，也就是虚拟文件系统。  \n    虚拟文件系统是Linux内核中国呢非常有用的一个方面，因为它为文件系统提供了一个通用的接口抽象，即VFS在用户和文件系统之间提供了一个交换层  \n4.设备驱动程序  \n&emsp;&emsp;设备驱动程序是Linux内核的主要部分。设备的分类如下：  \n&emsp;&emsp;&emsp;&emsp;字符设备：字符设备是能够像文件一样被访问的设备，由字符设备驱动程序来实现这种特点。  \n&emsp;&emsp;&emsp;&emsp;块设备：块设备也是通过设备节点来访问。块设备上能够过容纳文件系统。  \n&emsp;&emsp;&emsp;&emsp;网络设备：网络设备不同于字符设备和块设备，它是面向报文的而不是面向流的，它不支持随机访问，业没有请求缓冲区。  \n5.网络接口  \n&emsp;&emsp;网络接口可分为网络协议和网络驱动程序。网络协议负责实现每一种可能的网络传输协议。  \n&emsp;&emsp;&emsp;&emsp;5.1网络接口的命名  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;lo：local的缩写，一般指本地接口\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;eth0：ethernt的缩写一般用于以太网接口  \n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;wifi0:wifi是无限局域网，一般用于无限网接口。  \n&emsp;&emsp;5.2网络接口的工作  \n&emsp;&emsp;&emsp;&emsp;网络接口是用来发送和接受数据包的基本设备。系统中的所有网络接口组成一个链状结构，应用层的程序使用网络接口时按名称调用。  \n&emsp;&emsp;5.3虚拟网络接口  \n&emsp;&emsp;&emsp;&emsp;lo是最常见的接口之一，虚拟网络接口并不真实的从外界接受和发送数据包，而是在系统内部接受和发送数据包，因此虚拟网络接口不需要驱动程序。  \n\n## Linux目录及功能\n```markdown\n/                   虚拟系统的根目录，这里一般不存文件\n/bin                二进制目录，用于存放用户级的GNU工具，如：cat\n/boot               启动目录，存放Linux操作系统的内核和系统启动时所需要使用的文件\n/dev                设备目录，创建设备节点，存放计算机中所有的设备，包括硬件\n/etc                系统配置文件目录，只有root用户可以修改该文件\n/home               主目录，创建用户目录\n/lib                库目录，存放系统和应用程序的库文件\n/media              媒体目录，可移动媒体设备的常用挂载点\n/mnt                挂载目录，另一个可移动媒体设备的常用挂载点\n/opt                可选目录，常用于存放第三方软件包和数据文件\n/proc               进程目录，常在内存中，不占用任何磁盘空间，存放现有硬件及当前进程的相关信息\n/root               root用户的主目录\n/sbin               系统二进制目录，存放许多GNU管理级工具\n/run                运行目录，存放系统运行时的运行数据\n/srv                服务目录，存放的是所有与服务器相关的服务，即一些服务启动之后，这些服务需要访问的目录\n/sys                系统目录，存放系统硬件信息的相关文件\n/tmp                临时目录，普通用户或程序可以将临时文件存入该目录以方便与其他用户或程序交互信息。该目录所有的用户都可以进行访问，因此，重要的信息不因该存放在该目录中\n/user               用户二进制目录，存放系统的应用程序和与命令相关的系统数据，其中包括系统的一些函数库及图形界面所需要点文件等\n/var                可变目录，存放的是系统运行中经常变化的文件，如log日志文件等\n```\n","slug":"2022-07-06_初识Linux ","published":1,"updated":"2022-07-06T09:57:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9y2zqrz0008oy9kapzp3ebu","content":"<p>&emsp;&emsp;操作系统<br>&emsp;&emsp;操作系统时管理计算机硬件与软件资源的计算机程序，它能够合理地组织计算机工作的流程，是用户与计算机的接口，同时也提供了一个能够让用户与系统交互的操作界面。<br>操作系统有一下4个特征：<br>&emsp;&emsp;1.并发<br>&emsp;&emsp;&emsp;&emsp;并发是指两个或多个事件在同一时间间隔内发生。<br>&emsp;&emsp;2.共享<br>&emsp;&emsp;&emsp;&emsp;共享是指系统中的资源可供内存中多个并发执行的进程共同使用。<br>&emsp;&emsp;&emsp;&emsp;共享又分为以下两种方式：<br>&emsp;&emsp;2.1、互斥共享方式：在一段时间内只允许一个进程访问该资源。<br>&emsp;&emsp;2.2、同时访问方式：如：磁盘设备<br>&emsp;&emsp;3.虚拟<br>&emsp;&emsp;&emsp;&emsp;虚拟是指把一个物理上的实体变成为若干个逻辑上对应物<br>&emsp;&emsp;4.异步<br>&emsp;&emsp;&emsp;&emsp;在多道程序环境下，允许多个程序并发执行，但由于资源等因素限制，进程的执行并不是一直执行下去的，而是断断续续，内存中的每个进程会在什么时间开始执行、暂停，没道程序总共需要多少时间才能完成，这些都是以不可预知的速度向前推进，这就是进程的异步性。<br>注意：操作系统最基本的特征是并发和共享，两者互为存在条件。  </p>\n<h2 id=\"二、Unix概述\"><a href=\"#二、Unix概述\" class=\"headerlink\" title=\"二、Unix概述\"></a>二、Unix概述</h2><p>&emsp;&emsp;Unix是一个计算机操作系统用来专门协调、管理和控制计算机硬件和软件资源的控制程序。Unix是一个多用户和多线程的操作系统：多用户表示同一时刻可以有多个用户同时使用Unix操作系统，并且在他们各自做各自的任务时互不干扰：多线程表示任何用户在同一时间可以在Unix操作系统上运行多个程序。<br>1.Unix操作系统由 内核、Shell和程序组成<br>&emsp;&emsp;1.1、内核：内核是操作系统的核心部分，它一方面可以为程序分配时间和内存，另一方面通过处理文件的存储和通信以相应系统调用。<br>&emsp;&emsp;1.2、Shell：Shell属于用户和内核之间的连接接口。<br>&emsp;&emsp;1.3、程序：Shell是命令行解释器，这些命令也是程序的一部分，其中还包括文件和进程。<br>2.Unix操作系统的优点<br>&emsp;&emsp;2.1、多用户、多线程的操作系统并支持多种处理器的架构模式<br>&emsp;&emsp;2.2、使用简单编程语言使系统易于理解、易于修改、同时还会有各种编程语言的解释器和编译器。<br>&emsp;&emsp;2.3、使用功能强大的可编程的Shell语言，使用户界面美观大方，简洁明了。<br>&emsp;&emsp;2.4、开源性。  </p>\n<h2 id=\"Linux系统结构结构\"><a href=\"#Linux系统结构结构\" class=\"headerlink\" title=\"Linux系统结构结构\"></a>Linux系统结构结构</h2><p>&emsp;&emsp;计算机的硬件资源全部由内核（Kernel）来进行管理，内核需要管理的事项包括内存管理、进程管理、文件系统、设备驱动程序、网络结构5大部分组成<br>1.内存管理：<br>&emsp;&emsp;1.1、进程对内存的使用<br> &emsp;&emsp;&emsp;&emsp;要执行程序都必须要占有一定数量的内存。linux采用虚拟内存管理技术，这样可以使每个进程都有各自互不干扰的进程地址存储空间。虚拟地址不仅能保护操作系统，而且方便用户程序使用比实际物理内存较大的地址空间。<br>&emsp;&emsp;一个普通的进程包括代码段、数据段、BSS段、堆和栈5个不同的数据段。<br>&emsp;&emsp;       （1）、代码段：主要用来存放可执行文件的操作指令。<br>&emsp;&emsp;  （2）、数据段：数据段用来存放可执行文件中已经出实话的全局变量，也就是存放程序静态分配的变量和全局变量。<br>       &emsp;&emsp; （3）、BSS段：BSS段包含了程序中为初始化的全局变量，在内存中BSS段全部置为“0”。<br>       &emsp;&emsp; （4）、堆：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态地扩张和缩减。<br>      &emsp;&emsp;  （5）、栈：栈是用户为了存放程序而临时创建的一个局部变量，栈有先进先出的特点，所以栈可以用来保存或恢复调用现场。因此可以把堆栈当作一个寄存、交换临时数据的内存区。<br>&emsp;&emsp;1.2、物理内存<br>&emsp;&emsp;物理内存是系统硬件提供的真实内存大小，除了物理内存之外，在Linux中还有一个虚拟内存，是为了满足物理内存不足而存在的，被称为交换空间。<br>&emsp;&emsp;Linux系统将内存划分为容易处理的“内存页”<br>&emsp;&emsp;注意：Linux系统内核的内存管理采取的是分页存取机制，为了保证物理内存能够得到充分的利用，内核会在适当的时候将物理内存中不经常使用的段数据块信息自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。<br>2.进程管理<br>    进程是在自身的虚拟地址空间运行的一个独立的程序，从操作系统的角度来看，所有在操作系统上运行的东西，都可以称为一个程序。<br>    进程的分类：<br>&emsp;&emsp;（1）系统进程：可以执行内存资源分配和进程切换等管理工作<br>&emsp;&emsp; （2）用户进程：通过执行用户程序、应用程序或内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。<br>&emsp;&emsp;&emsp;&emsp;  针对用户进程可分为：交互进程、批处理进程和守护进程3种。<br>&emsp;&emsp;&emsp;&emsp;         交互进程：由一个Shell终端启动的进程<br>&emsp;&emsp;&emsp;&emsp;        批处理进程：该进程是一个进程集合，负责按顺序启动其他的程序。<br>&emsp;&emsp;&emsp;&emsp;        守护进程：守护进程是一只运行的一种进程。独立于终端，并周期性地执行某种任务或等待处理某些发生的事件。<br>&emsp;&emsp;（3）进程的状态：<br>&emsp;&emsp;&emsp;&emsp;可运行状态：正在运行或正准备运行。<br>&emsp;&emsp;&emsp;&emsp;可中断的等待状态：处于阻塞状态，达到条件就运行。<br>&emsp;&emsp;&emsp;&emsp;不中断的等待状态：与可中断等待状态类似，但这个进程对进程的信号不做回应。<br>&emsp;&emsp;&emsp;&emsp;僵死状态：每个进程在结束后都会处于僵死状态，等待父进程调用进而释放资源，处于该状态的进程已结束。但是它的父进程还没有释放其系统资源。<br>&emsp;&emsp;&emsp;&emsp;暂停状态：表明此时的进程暂时停止，来接受某种特殊信号。<br>3.文件系统<br>&emsp;&emsp; Linux对各种文件系统支持是通过VFS的组件实现的，也就是虚拟文件系统。<br>    虚拟文件系统是Linux内核中国呢非常有用的一个方面，因为它为文件系统提供了一个通用的接口抽象，即VFS在用户和文件系统之间提供了一个交换层<br>4.设备驱动程序<br>&emsp;&emsp;设备驱动程序是Linux内核的主要部分。设备的分类如下：<br>&emsp;&emsp;&emsp;&emsp;字符设备：字符设备是能够像文件一样被访问的设备，由字符设备驱动程序来实现这种特点。<br>&emsp;&emsp;&emsp;&emsp;块设备：块设备也是通过设备节点来访问。块设备上能够过容纳文件系统。<br>&emsp;&emsp;&emsp;&emsp;网络设备：网络设备不同于字符设备和块设备，它是面向报文的而不是面向流的，它不支持随机访问，业没有请求缓冲区。<br>5.网络接口<br>&emsp;&emsp;网络接口可分为网络协议和网络驱动程序。网络协议负责实现每一种可能的网络传输协议。<br>&emsp;&emsp;&emsp;&emsp;5.1网络接口的命名<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;lo：local的缩写，一般指本地接口<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;eth0：ethernt的缩写一般用于以太网接口<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;wifi0:wifi是无限局域网，一般用于无限网接口。<br>&emsp;&emsp;5.2网络接口的工作<br>&emsp;&emsp;&emsp;&emsp;网络接口是用来发送和接受数据包的基本设备。系统中的所有网络接口组成一个链状结构，应用层的程序使用网络接口时按名称调用。<br>&emsp;&emsp;5.3虚拟网络接口<br>&emsp;&emsp;&emsp;&emsp;lo是最常见的接口之一，虚拟网络接口并不真实的从外界接受和发送数据包，而是在系统内部接受和发送数据包，因此虚拟网络接口不需要驱动程序。  </p>\n<h2 id=\"Linux目录及功能\"><a href=\"#Linux目录及功能\" class=\"headerlink\" title=\"Linux目录及功能\"></a>Linux目录及功能</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/                   虚拟系统的根目录，这里一般不存文件</span><br><span class=\"line\">/bin                二进制目录，用于存放用户级的GNU工具，如：cat</span><br><span class=\"line\">/boot               启动目录，存放Linux操作系统的内核和系统启动时所需要使用的文件</span><br><span class=\"line\">/dev                设备目录，创建设备节点，存放计算机中所有的设备，包括硬件</span><br><span class=\"line\">/etc                系统配置文件目录，只有root用户可以修改该文件</span><br><span class=\"line\">/home               主目录，创建用户目录</span><br><span class=\"line\">/lib                库目录，存放系统和应用程序的库文件</span><br><span class=\"line\">/media              媒体目录，可移动媒体设备的常用挂载点</span><br><span class=\"line\">/mnt                挂载目录，另一个可移动媒体设备的常用挂载点</span><br><span class=\"line\">/opt                可选目录，常用于存放第三方软件包和数据文件</span><br><span class=\"line\">/proc               进程目录，常在内存中，不占用任何磁盘空间，存放现有硬件及当前进程的相关信息</span><br><span class=\"line\">/root               root用户的主目录</span><br><span class=\"line\">/sbin               系统二进制目录，存放许多GNU管理级工具</span><br><span class=\"line\">/run                运行目录，存放系统运行时的运行数据</span><br><span class=\"line\">/srv                服务目录，存放的是所有与服务器相关的服务，即一些服务启动之后，这些服务需要访问的目录</span><br><span class=\"line\">/sys                系统目录，存放系统硬件信息的相关文件</span><br><span class=\"line\">/tmp                临时目录，普通用户或程序可以将临时文件存入该目录以方便与其他用户或程序交互信息。该目录所有的用户都可以进行访问，因此，重要的信息不因该存放在该目录中</span><br><span class=\"line\">/user               用户二进制目录，存放系统的应用程序和与命令相关的系统数据，其中包括系统的一些函数库及图形界面所需要点文件等</span><br><span class=\"line\">/var                可变目录，存放的是系统运行中经常变化的文件，如log日志文件等</span><br></pre></td></tr></table></figure>\n","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":"<p>&emsp;&emsp;操作系统<br>&emsp;&emsp;操作系统时管理计算机硬件与软件资源的计算机程序，它能够合理地组织计算机工作的流程，是用户与计算机的接口，同时也提供了一个能够让用户与系统交互的操作界面。<br>操作系统有一下4个特征：<br>&emsp;&emsp;1.并发<br>&emsp;&emsp;&emsp;&emsp;并发是指两个或多个事件在同一时间间隔内发生。<br>&emsp;&emsp;2.共享<br>&emsp;&emsp;&emsp;&emsp;共享是指系统中的资源可供内存中多个并发执行的进程共同使用。<br>&emsp;&emsp;&emsp;&emsp;共享又分为以下两种方式：<br>&emsp;&emsp;2.1、互斥共享方式：在一段时间内只允许一个进程访问该资源。<br>&emsp;&emsp;2.2、同时访问方式：如：磁盘设备<br>&emsp;&emsp;3.虚拟<br>&emsp;&emsp;&emsp;&emsp;虚拟是指把一个物理上的实体变成为若干个逻辑上对应物<br>&emsp;&emsp;4.异步<br>&emsp;&emsp;&emsp;&emsp;在多道程序环境下，允许多个程序并发执行，但由于资源等因素限制，进程的执行并不是一直执行下去的，而是断断续续，内存中的每个进程会在什么时间开始执行、暂停，没道程序总共需要多少时间才能完成，这些都是以不可预知的速度向前推进，这就是进程的异步性。<br>注意：操作系统最基本的特征是并发和共享，两者互为存在条件。  </p>\n<h2 id=\"二、Unix概述\"><a href=\"#二、Unix概述\" class=\"headerlink\" title=\"二、Unix概述\"></a>二、Unix概述</h2><p>&emsp;&emsp;Unix是一个计算机操作系统用来专门协调、管理和控制计算机硬件和软件资源的控制程序。Unix是一个多用户和多线程的操作系统：多用户表示同一时刻可以有多个用户同时使用Unix操作系统，并且在他们各自做各自的任务时互不干扰：多线程表示任何用户在同一时间可以在Unix操作系统上运行多个程序。<br>1.Unix操作系统由 内核、Shell和程序组成<br>&emsp;&emsp;1.1、内核：内核是操作系统的核心部分，它一方面可以为程序分配时间和内存，另一方面通过处理文件的存储和通信以相应系统调用。<br>&emsp;&emsp;1.2、Shell：Shell属于用户和内核之间的连接接口。<br>&emsp;&emsp;1.3、程序：Shell是命令行解释器，这些命令也是程序的一部分，其中还包括文件和进程。<br>2.Unix操作系统的优点<br>&emsp;&emsp;2.1、多用户、多线程的操作系统并支持多种处理器的架构模式<br>&emsp;&emsp;2.2、使用简单编程语言使系统易于理解、易于修改、同时还会有各种编程语言的解释器和编译器。<br>&emsp;&emsp;2.3、使用功能强大的可编程的Shell语言，使用户界面美观大方，简洁明了。<br>&emsp;&emsp;2.4、开源性。  </p>\n<h2 id=\"Linux系统结构结构\"><a href=\"#Linux系统结构结构\" class=\"headerlink\" title=\"Linux系统结构结构\"></a>Linux系统结构结构</h2><p>&emsp;&emsp;计算机的硬件资源全部由内核（Kernel）来进行管理，内核需要管理的事项包括内存管理、进程管理、文件系统、设备驱动程序、网络结构5大部分组成<br>1.内存管理：<br>&emsp;&emsp;1.1、进程对内存的使用<br> &emsp;&emsp;&emsp;&emsp;要执行程序都必须要占有一定数量的内存。linux采用虚拟内存管理技术，这样可以使每个进程都有各自互不干扰的进程地址存储空间。虚拟地址不仅能保护操作系统，而且方便用户程序使用比实际物理内存较大的地址空间。<br>&emsp;&emsp;一个普通的进程包括代码段、数据段、BSS段、堆和栈5个不同的数据段。<br>&emsp;&emsp;       （1）、代码段：主要用来存放可执行文件的操作指令。<br>&emsp;&emsp;  （2）、数据段：数据段用来存放可执行文件中已经出实话的全局变量，也就是存放程序静态分配的变量和全局变量。<br>       &emsp;&emsp; （3）、BSS段：BSS段包含了程序中为初始化的全局变量，在内存中BSS段全部置为“0”。<br>       &emsp;&emsp; （4）、堆：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态地扩张和缩减。<br>      &emsp;&emsp;  （5）、栈：栈是用户为了存放程序而临时创建的一个局部变量，栈有先进先出的特点，所以栈可以用来保存或恢复调用现场。因此可以把堆栈当作一个寄存、交换临时数据的内存区。<br>&emsp;&emsp;1.2、物理内存<br>&emsp;&emsp;物理内存是系统硬件提供的真实内存大小，除了物理内存之外，在Linux中还有一个虚拟内存，是为了满足物理内存不足而存在的，被称为交换空间。<br>&emsp;&emsp;Linux系统将内存划分为容易处理的“内存页”<br>&emsp;&emsp;注意：Linux系统内核的内存管理采取的是分页存取机制，为了保证物理内存能够得到充分的利用，内核会在适当的时候将物理内存中不经常使用的段数据块信息自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。<br>2.进程管理<br>    进程是在自身的虚拟地址空间运行的一个独立的程序，从操作系统的角度来看，所有在操作系统上运行的东西，都可以称为一个程序。<br>    进程的分类：<br>&emsp;&emsp;（1）系统进程：可以执行内存资源分配和进程切换等管理工作<br>&emsp;&emsp; （2）用户进程：通过执行用户程序、应用程序或内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。<br>&emsp;&emsp;&emsp;&emsp;  针对用户进程可分为：交互进程、批处理进程和守护进程3种。<br>&emsp;&emsp;&emsp;&emsp;         交互进程：由一个Shell终端启动的进程<br>&emsp;&emsp;&emsp;&emsp;        批处理进程：该进程是一个进程集合，负责按顺序启动其他的程序。<br>&emsp;&emsp;&emsp;&emsp;        守护进程：守护进程是一只运行的一种进程。独立于终端，并周期性地执行某种任务或等待处理某些发生的事件。<br>&emsp;&emsp;（3）进程的状态：<br>&emsp;&emsp;&emsp;&emsp;可运行状态：正在运行或正准备运行。<br>&emsp;&emsp;&emsp;&emsp;可中断的等待状态：处于阻塞状态，达到条件就运行。<br>&emsp;&emsp;&emsp;&emsp;不中断的等待状态：与可中断等待状态类似，但这个进程对进程的信号不做回应。<br>&emsp;&emsp;&emsp;&emsp;僵死状态：每个进程在结束后都会处于僵死状态，等待父进程调用进而释放资源，处于该状态的进程已结束。但是它的父进程还没有释放其系统资源。<br>&emsp;&emsp;&emsp;&emsp;暂停状态：表明此时的进程暂时停止，来接受某种特殊信号。<br>3.文件系统<br>&emsp;&emsp; Linux对各种文件系统支持是通过VFS的组件实现的，也就是虚拟文件系统。<br>    虚拟文件系统是Linux内核中国呢非常有用的一个方面，因为它为文件系统提供了一个通用的接口抽象，即VFS在用户和文件系统之间提供了一个交换层<br>4.设备驱动程序<br>&emsp;&emsp;设备驱动程序是Linux内核的主要部分。设备的分类如下：<br>&emsp;&emsp;&emsp;&emsp;字符设备：字符设备是能够像文件一样被访问的设备，由字符设备驱动程序来实现这种特点。<br>&emsp;&emsp;&emsp;&emsp;块设备：块设备也是通过设备节点来访问。块设备上能够过容纳文件系统。<br>&emsp;&emsp;&emsp;&emsp;网络设备：网络设备不同于字符设备和块设备，它是面向报文的而不是面向流的，它不支持随机访问，业没有请求缓冲区。<br>5.网络接口<br>&emsp;&emsp;网络接口可分为网络协议和网络驱动程序。网络协议负责实现每一种可能的网络传输协议。<br>&emsp;&emsp;&emsp;&emsp;5.1网络接口的命名<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;lo：local的缩写，一般指本地接口<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;eth0：ethernt的缩写一般用于以太网接口<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;wifi0:wifi是无限局域网，一般用于无限网接口。<br>&emsp;&emsp;5.2网络接口的工作<br>&emsp;&emsp;&emsp;&emsp;网络接口是用来发送和接受数据包的基本设备。系统中的所有网络接口组成一个链状结构，应用层的程序使用网络接口时按名称调用。<br>&emsp;&emsp;5.3虚拟网络接口<br>&emsp;&emsp;&emsp;&emsp;lo是最常见的接口之一，虚拟网络接口并不真实的从外界接受和发送数据包，而是在系统内部接受和发送数据包，因此虚拟网络接口不需要驱动程序。  </p>\n<h2 id=\"Linux目录及功能\"><a href=\"#Linux目录及功能\" class=\"headerlink\" title=\"Linux目录及功能\"></a>Linux目录及功能</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/                   虚拟系统的根目录，这里一般不存文件</span><br><span class=\"line\">/bin                二进制目录，用于存放用户级的GNU工具，如：cat</span><br><span class=\"line\">/boot               启动目录，存放Linux操作系统的内核和系统启动时所需要使用的文件</span><br><span class=\"line\">/dev                设备目录，创建设备节点，存放计算机中所有的设备，包括硬件</span><br><span class=\"line\">/etc                系统配置文件目录，只有root用户可以修改该文件</span><br><span class=\"line\">/home               主目录，创建用户目录</span><br><span class=\"line\">/lib                库目录，存放系统和应用程序的库文件</span><br><span class=\"line\">/media              媒体目录，可移动媒体设备的常用挂载点</span><br><span class=\"line\">/mnt                挂载目录，另一个可移动媒体设备的常用挂载点</span><br><span class=\"line\">/opt                可选目录，常用于存放第三方软件包和数据文件</span><br><span class=\"line\">/proc               进程目录，常在内存中，不占用任何磁盘空间，存放现有硬件及当前进程的相关信息</span><br><span class=\"line\">/root               root用户的主目录</span><br><span class=\"line\">/sbin               系统二进制目录，存放许多GNU管理级工具</span><br><span class=\"line\">/run                运行目录，存放系统运行时的运行数据</span><br><span class=\"line\">/srv                服务目录，存放的是所有与服务器相关的服务，即一些服务启动之后，这些服务需要访问的目录</span><br><span class=\"line\">/sys                系统目录，存放系统硬件信息的相关文件</span><br><span class=\"line\">/tmp                临时目录，普通用户或程序可以将临时文件存入该目录以方便与其他用户或程序交互信息。该目录所有的用户都可以进行访问，因此，重要的信息不因该存放在该目录中</span><br><span class=\"line\">/user               用户二进制目录，存放系统的应用程序和与命令相关的系统数据，其中包括系统的一些函数库及图形界面所需要点文件等</span><br><span class=\"line\">/var                可变目录，存放的是系统运行中经常变化的文件，如log日志文件等</span><br></pre></td></tr></table></figure>\n"},{"title":"数组实现学生成绩管理系统","date":"2022-10-25T11:36:11.000Z","_content":"## 引言\n因为学生管理系统类似数据库，需要实现增删改查，来管理其数据，所以该管理系统也应该实现这四个功能，这里使用数组实现，且具体实现如下。  \n## 源代码\n具体源代码存放在gitee仓库地址如下  \n```\nhttps://gitee.com/thebyte/work.git\n```\n## 学生成绩管理系统之目录  \n![menu](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/menu.png)\n这里使用printf()函数直接输出  \n\n## 学生成绩管理系统之录入\n![add](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/add.png)\n这里需要定义一个二维数组，将学号放第一列，成绩放低0列，还需用到循环与条件判断来判断是否还要继续输入,并且定义一个存放实际人数变量actual，每次录入加1人  \n\n## 学习管理系统之修改\n![alter](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/alter.png)\n这里使用循环一个一个学号对比，找到后然后将修改成绩覆盖到要修改的成绩位置，没找到则输出查无此人  \n\n## 学生成绩管理系统之删除\n![delete](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del.png)\n![delete](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del1.png)\n删除类似修改，只是将成绩覆盖改成，下面的成绩全部往上移1格，这里每删除一个人则实际人数actual减1人  \n\n## 学生成绩管理系统之查找\n![find](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/find.png)\n查找也是利用学号，一一对比找学号，然后打印该学号位置的成绩  \n\n## 学生成绩管理系统之打印\n![print](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/pri.png)\n这里使用for循环一一换行打印  \n\n## 学生成绩管理系统之排序\n### 冒泡排序\n![maopao](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/maopao.png)\n两两比对，交换位置，然后循环重新再比对，注意点是，外循环与内循环都比实际人数少1位  \n\n### 选择排序\n![choice](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/choice.png)\n选择排序是将最小的元素挑出来与没排序的第一位交换位置，它会不断的选择剩余元素中的最小者      \n\n### 插入排序\n![insert](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/insert.png)\n插入在比自己小的数的前面  \n首先将后面比前面小的数存放在另一个变量，然后前面比这个数大的数依次往后挪，直到比自己小的数，然后放入到其后面。  \n### 归并排序\n![merge](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui1.png)\n![merge](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui2.png)\n![merge](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui3.png)\n先用递归拆分数组，然后用循环归并并排序数组  \n递归是不断把数组拆成左右两部分，其中写的if判断是用来限制，分成一个元素后不可再分。\n归并是先记录左右素组的大小，然后分别放到另一个数组中，然后归并到原来的数组，分别对左右数组的第一个元素比较  \n当剩下元素没用完时会添加再数组后面\n\n## 功能选择\n### 功能选择\n![xuan](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gonn.png)\n这里将多个函数封装到了功能选择函数中  \n用switch来实现多种功能的选择  \n\n### 排序选择\n![paixuan](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/paixuan.png)\n与功能选择类似  \n\n## 函数的入口main\n![main](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/main.png)\n所有内容都是在main函数中使用的，所以要在main中导入之前的函数","source":"_posts/2022-10-19_学生成绩管理系统.md","raw":"---\ntitle: 数组实现学生成绩管理系统\ndate: 2022-10-25 19:36:11\ntag: [C]\n---\n## 引言\n因为学生管理系统类似数据库，需要实现增删改查，来管理其数据，所以该管理系统也应该实现这四个功能，这里使用数组实现，且具体实现如下。  \n## 源代码\n具体源代码存放在gitee仓库地址如下  \n```\nhttps://gitee.com/thebyte/work.git\n```\n## 学生成绩管理系统之目录  \n![menu](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/menu.png)\n这里使用printf()函数直接输出  \n\n## 学生成绩管理系统之录入\n![add](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/add.png)\n这里需要定义一个二维数组，将学号放第一列，成绩放低0列，还需用到循环与条件判断来判断是否还要继续输入,并且定义一个存放实际人数变量actual，每次录入加1人  \n\n## 学习管理系统之修改\n![alter](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/alter.png)\n这里使用循环一个一个学号对比，找到后然后将修改成绩覆盖到要修改的成绩位置，没找到则输出查无此人  \n\n## 学生成绩管理系统之删除\n![delete](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del.png)\n![delete](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del1.png)\n删除类似修改，只是将成绩覆盖改成，下面的成绩全部往上移1格，这里每删除一个人则实际人数actual减1人  \n\n## 学生成绩管理系统之查找\n![find](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/find.png)\n查找也是利用学号，一一对比找学号，然后打印该学号位置的成绩  \n\n## 学生成绩管理系统之打印\n![print](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/pri.png)\n这里使用for循环一一换行打印  \n\n## 学生成绩管理系统之排序\n### 冒泡排序\n![maopao](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/maopao.png)\n两两比对，交换位置，然后循环重新再比对，注意点是，外循环与内循环都比实际人数少1位  \n\n### 选择排序\n![choice](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/choice.png)\n选择排序是将最小的元素挑出来与没排序的第一位交换位置，它会不断的选择剩余元素中的最小者      \n\n### 插入排序\n![insert](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/insert.png)\n插入在比自己小的数的前面  \n首先将后面比前面小的数存放在另一个变量，然后前面比这个数大的数依次往后挪，直到比自己小的数，然后放入到其后面。  \n### 归并排序\n![merge](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui1.png)\n![merge](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui2.png)\n![merge](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui3.png)\n先用递归拆分数组，然后用循环归并并排序数组  \n递归是不断把数组拆成左右两部分，其中写的if判断是用来限制，分成一个元素后不可再分。\n归并是先记录左右素组的大小，然后分别放到另一个数组中，然后归并到原来的数组，分别对左右数组的第一个元素比较  \n当剩下元素没用完时会添加再数组后面\n\n## 功能选择\n### 功能选择\n![xuan](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gonn.png)\n这里将多个函数封装到了功能选择函数中  \n用switch来实现多种功能的选择  \n\n### 排序选择\n![paixuan](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/paixuan.png)\n与功能选择类似  \n\n## 函数的入口main\n![main](https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/main.png)\n所有内容都是在main函数中使用的，所以要在main中导入之前的函数","slug":"2022-10-19_学生成绩管理系统","published":1,"updated":"2022-11-01T09:02:02.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9y2zqs0000aoy9kh16j9uqr","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>因为学生管理系统类似数据库，需要实现增删改查，来管理其数据，所以该管理系统也应该实现这四个功能，这里使用数组实现，且具体实现如下。  </p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p>具体源代码存放在gitee仓库地址如下  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/thebyte/work.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"学生成绩管理系统之目录\"><a href=\"#学生成绩管理系统之目录\" class=\"headerlink\" title=\"学生成绩管理系统之目录\"></a>学生成绩管理系统之目录</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/menu.png\" alt=\"menu\"><br>这里使用printf()函数直接输出  </p>\n<h2 id=\"学生成绩管理系统之录入\"><a href=\"#学生成绩管理系统之录入\" class=\"headerlink\" title=\"学生成绩管理系统之录入\"></a>学生成绩管理系统之录入</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/add.png\" alt=\"add\"><br>这里需要定义一个二维数组，将学号放第一列，成绩放低0列，还需用到循环与条件判断来判断是否还要继续输入,并且定义一个存放实际人数变量actual，每次录入加1人  </p>\n<h2 id=\"学习管理系统之修改\"><a href=\"#学习管理系统之修改\" class=\"headerlink\" title=\"学习管理系统之修改\"></a>学习管理系统之修改</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/alter.png\" alt=\"alter\"><br>这里使用循环一个一个学号对比，找到后然后将修改成绩覆盖到要修改的成绩位置，没找到则输出查无此人  </p>\n<h2 id=\"学生成绩管理系统之删除\"><a href=\"#学生成绩管理系统之删除\" class=\"headerlink\" title=\"学生成绩管理系统之删除\"></a>学生成绩管理系统之删除</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del.png\" alt=\"delete\"><br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del1.png\" alt=\"delete\"><br>删除类似修改，只是将成绩覆盖改成，下面的成绩全部往上移1格，这里每删除一个人则实际人数actual减1人  </p>\n<h2 id=\"学生成绩管理系统之查找\"><a href=\"#学生成绩管理系统之查找\" class=\"headerlink\" title=\"学生成绩管理系统之查找\"></a>学生成绩管理系统之查找</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/find.png\" alt=\"find\"><br>查找也是利用学号，一一对比找学号，然后打印该学号位置的成绩  </p>\n<h2 id=\"学生成绩管理系统之打印\"><a href=\"#学生成绩管理系统之打印\" class=\"headerlink\" title=\"学生成绩管理系统之打印\"></a>学生成绩管理系统之打印</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/pri.png\" alt=\"print\"><br>这里使用for循环一一换行打印  </p>\n<h2 id=\"学生成绩管理系统之排序\"><a href=\"#学生成绩管理系统之排序\" class=\"headerlink\" title=\"学生成绩管理系统之排序\"></a>学生成绩管理系统之排序</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/maopao.png\" alt=\"maopao\"><br>两两比对，交换位置，然后循环重新再比对，注意点是，外循环与内循环都比实际人数少1位  </p>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/choice.png\" alt=\"choice\"><br>选择排序是将最小的元素挑出来与没排序的第一位交换位置，它会不断的选择剩余元素中的最小者      </p>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/insert.png\" alt=\"insert\"><br>插入在比自己小的数的前面<br>首先将后面比前面小的数存放在另一个变量，然后前面比这个数大的数依次往后挪，直到比自己小的数，然后放入到其后面。  </p>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui1.png\" alt=\"merge\"><br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui2.png\" alt=\"merge\"><br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui3.png\" alt=\"merge\"><br>先用递归拆分数组，然后用循环归并并排序数组<br>递归是不断把数组拆成左右两部分，其中写的if判断是用来限制，分成一个元素后不可再分。<br>归并是先记录左右素组的大小，然后分别放到另一个数组中，然后归并到原来的数组，分别对左右数组的第一个元素比较<br>当剩下元素没用完时会添加再数组后面</p>\n<h2 id=\"功能选择\"><a href=\"#功能选择\" class=\"headerlink\" title=\"功能选择\"></a>功能选择</h2><h3 id=\"功能选择-1\"><a href=\"#功能选择-1\" class=\"headerlink\" title=\"功能选择\"></a>功能选择</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gonn.png\" alt=\"xuan\"><br>这里将多个函数封装到了功能选择函数中<br>用switch来实现多种功能的选择  </p>\n<h3 id=\"排序选择\"><a href=\"#排序选择\" class=\"headerlink\" title=\"排序选择\"></a>排序选择</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/paixuan.png\" alt=\"paixuan\"><br>与功能选择类似  </p>\n<h2 id=\"函数的入口main\"><a href=\"#函数的入口main\" class=\"headerlink\" title=\"函数的入口main\"></a>函数的入口main</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/main.png\" alt=\"main\"><br>所有内容都是在main函数中使用的，所以要在main中导入之前的函数</p>\n","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>因为学生管理系统类似数据库，需要实现增删改查，来管理其数据，所以该管理系统也应该实现这四个功能，这里使用数组实现，且具体实现如下。  </p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p>具体源代码存放在gitee仓库地址如下  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/thebyte/work.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"学生成绩管理系统之目录\"><a href=\"#学生成绩管理系统之目录\" class=\"headerlink\" title=\"学生成绩管理系统之目录\"></a>学生成绩管理系统之目录</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/menu.png\" alt=\"menu\"><br>这里使用printf()函数直接输出  </p>\n<h2 id=\"学生成绩管理系统之录入\"><a href=\"#学生成绩管理系统之录入\" class=\"headerlink\" title=\"学生成绩管理系统之录入\"></a>学生成绩管理系统之录入</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/add.png\" alt=\"add\"><br>这里需要定义一个二维数组，将学号放第一列，成绩放低0列，还需用到循环与条件判断来判断是否还要继续输入,并且定义一个存放实际人数变量actual，每次录入加1人  </p>\n<h2 id=\"学习管理系统之修改\"><a href=\"#学习管理系统之修改\" class=\"headerlink\" title=\"学习管理系统之修改\"></a>学习管理系统之修改</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/alter.png\" alt=\"alter\"><br>这里使用循环一个一个学号对比，找到后然后将修改成绩覆盖到要修改的成绩位置，没找到则输出查无此人  </p>\n<h2 id=\"学生成绩管理系统之删除\"><a href=\"#学生成绩管理系统之删除\" class=\"headerlink\" title=\"学生成绩管理系统之删除\"></a>学生成绩管理系统之删除</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del.png\" alt=\"delete\"><br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/del1.png\" alt=\"delete\"><br>删除类似修改，只是将成绩覆盖改成，下面的成绩全部往上移1格，这里每删除一个人则实际人数actual减1人  </p>\n<h2 id=\"学生成绩管理系统之查找\"><a href=\"#学生成绩管理系统之查找\" class=\"headerlink\" title=\"学生成绩管理系统之查找\"></a>学生成绩管理系统之查找</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/find.png\" alt=\"find\"><br>查找也是利用学号，一一对比找学号，然后打印该学号位置的成绩  </p>\n<h2 id=\"学生成绩管理系统之打印\"><a href=\"#学生成绩管理系统之打印\" class=\"headerlink\" title=\"学生成绩管理系统之打印\"></a>学生成绩管理系统之打印</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/pri.png\" alt=\"print\"><br>这里使用for循环一一换行打印  </p>\n<h2 id=\"学生成绩管理系统之排序\"><a href=\"#学生成绩管理系统之排序\" class=\"headerlink\" title=\"学生成绩管理系统之排序\"></a>学生成绩管理系统之排序</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/maopao.png\" alt=\"maopao\"><br>两两比对，交换位置，然后循环重新再比对，注意点是，外循环与内循环都比实际人数少1位  </p>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/choice.png\" alt=\"choice\"><br>选择排序是将最小的元素挑出来与没排序的第一位交换位置，它会不断的选择剩余元素中的最小者      </p>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/insert.png\" alt=\"insert\"><br>插入在比自己小的数的前面<br>首先将后面比前面小的数存放在另一个变量，然后前面比这个数大的数依次往后挪，直到比自己小的数，然后放入到其后面。  </p>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui1.png\" alt=\"merge\"><br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui2.png\" alt=\"merge\"><br><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gui3.png\" alt=\"merge\"><br>先用递归拆分数组，然后用循环归并并排序数组<br>递归是不断把数组拆成左右两部分，其中写的if判断是用来限制，分成一个元素后不可再分。<br>归并是先记录左右素组的大小，然后分别放到另一个数组中，然后归并到原来的数组，分别对左右数组的第一个元素比较<br>当剩下元素没用完时会添加再数组后面</p>\n<h2 id=\"功能选择\"><a href=\"#功能选择\" class=\"headerlink\" title=\"功能选择\"></a>功能选择</h2><h3 id=\"功能选择-1\"><a href=\"#功能选择-1\" class=\"headerlink\" title=\"功能选择\"></a>功能选择</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/gonn.png\" alt=\"xuan\"><br>这里将多个函数封装到了功能选择函数中<br>用switch来实现多种功能的选择  </p>\n<h3 id=\"排序选择\"><a href=\"#排序选择\" class=\"headerlink\" title=\"排序选择\"></a>排序选择</h3><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/paixuan.png\" alt=\"paixuan\"><br>与功能选择类似  </p>\n<h2 id=\"函数的入口main\"><a href=\"#函数的入口main\" class=\"headerlink\" title=\"函数的入口main\"></a>函数的入口main</h2><p><img src=\"https://blog-alan.oss-cn-hangzhou.aliyuncs.com/c/main.png\" alt=\"main\"><br>所有内容都是在main函数中使用的，所以要在main中导入之前的函数</p>\n"},{"title":"C语言笔记简化版","date":"2022-10-28T03:44:23.000Z","_content":"## 各章节重点\n### 一、数据类型\n```\n1、int   整型  \n2、float 浮点型（小数）  \n3、char  字符  \n```\n\n### 二、输入输出\n```\n1.printf();输出函数    \n2.scanf();输入函数    \n```\n\n### 三、选择结构\n```\nif(条件表达式1)\n{\n\t//条件1成立执行这里的代码；\n}\nelse (条件2)\n{\n\t//条件2成立执行这里的代码；\n}\nelse\n{\n\t//其他情况执行这里代码；\n}\n```\n\n### 四、循环结构\n循环分为for循环、while循环、do while循环  \n1.for循环  \n```\nfor(循环变量赋初值;循环条件;循环变量增值)\n{\n\t//每次循环要执行的代码放这;\n}\n```\n\n2.while循环\n```\nwhile(条件表达式1)\n{\n\t//每次循环要执行的代码放这;\n}\n```\n\n3.do while循环\n```\ndo\n{\n\t//每次循环要执行的代码放这;\n}while(条件表达式1);\n```\n\n### 五、退出循环语句\n退出循环分为break; 与 continue  \n\n```\nbreak;\n``` \n\nbreak;语句用于退出整个循环\n\n```\ncontinue;\n```\n\ncontinue用于退出本次循环而不退出整个循环  \n\n### 六、数组\n1. 一维数组  \n1.1 定义一维数组 \n\n```\n数据类型 数组名[填数字或表达式];\n```\n\n1.2\t数组引用  \n\n```\n数组名[下标]\n```\n\n2. 二维数组\n2.1 二维数组定义\n\n```\n类型 数组名[多少行][多少.列];\n```\n\n2.2 二维数组的引用  \n\n```\n数据类型 数组名[行.下标][列.下标]\n```\n\n### 七、字符串处理函数\n```\n1.puts(字符数组)   \n输出字符串函数      \n\n2.gets(字符数组)   \n输入字符串的函数  \n\n3.strcat(字符数组1,字符数组2)          \n字符串连接函数   \n\n4.strcpy(字符数组1,字符数组2)\n字符串复制函数  \n\n5.strcmp(字符串1,字符串2)     \n字符串比较函数  \n\n6.strlen(字符数组)   \n测字符串长度的函数  \n\n7.strlwr(字符串)  \n转换为小写的函数  \n\n8.strupr(字符串)  \n转换为大写的函数  \n```\n\n### 八、函数定义\n1.定义无参函数\n```\n类型名 函数名()\n{\n\t//函数体;\n}\n```\n2.定义有参函数  \n```\n类型名 函数名(形式参数)\n{\n\t//函数体;\n}\n```\n### 九、指针\n1.定义指针变量\n```\n类型名 *指针变量名;\n```\n### 十、指针数组\n数组元素的指针就是数组元素的地址  \n通过指针引用数组的方法如下：  \n```\n*(数组名+数字)\n```\n\n### 十一、动态内存分配\n```\n1、malloc()函数开辟动态存储区\n2、calloc()函数开辟动态存储区\n3、realloc()函数重新分配动态存储区\n4、free()函数释放动态存储区\n```\n\n### 十二、结构体\n1.定义结构体  \n```\nstruct 结构体名\n{\n    成员表列;\n    //类型名 成员名; \n}\n```\n### 十三、共用体类型\n```\nunion 共用体名\n{\n\t成员表列\n}变量表列；\n```\n\n### 十四、枚举类型\n1.枚举类型定义   \n```\nenum[枚举名]{枚举元素列表};\n```\n### typedef声明新类型名\n```\ntypedef int Integer;\n```\n比如这句的意思是用Integer为类型名，作用与int相同  \n### 十五、文件的输入输出\n1.用fopen函数打开数据文件  \n```\nfopen(文件名,使用文件方式);\n```\n2.用fclose函数关闭数据文件  \n```\nfclose(文件指针);\n```\n","source":"_posts/2022-10-28_C语言笔记简化版.md","raw":"---\ntitle: C语言笔记简化版\ndate: 2022/10/28 11:44:23\ntags: [C]\n---\n## 各章节重点\n### 一、数据类型\n```\n1、int   整型  \n2、float 浮点型（小数）  \n3、char  字符  \n```\n\n### 二、输入输出\n```\n1.printf();输出函数    \n2.scanf();输入函数    \n```\n\n### 三、选择结构\n```\nif(条件表达式1)\n{\n\t//条件1成立执行这里的代码；\n}\nelse (条件2)\n{\n\t//条件2成立执行这里的代码；\n}\nelse\n{\n\t//其他情况执行这里代码；\n}\n```\n\n### 四、循环结构\n循环分为for循环、while循环、do while循环  \n1.for循环  \n```\nfor(循环变量赋初值;循环条件;循环变量增值)\n{\n\t//每次循环要执行的代码放这;\n}\n```\n\n2.while循环\n```\nwhile(条件表达式1)\n{\n\t//每次循环要执行的代码放这;\n}\n```\n\n3.do while循环\n```\ndo\n{\n\t//每次循环要执行的代码放这;\n}while(条件表达式1);\n```\n\n### 五、退出循环语句\n退出循环分为break; 与 continue  \n\n```\nbreak;\n``` \n\nbreak;语句用于退出整个循环\n\n```\ncontinue;\n```\n\ncontinue用于退出本次循环而不退出整个循环  \n\n### 六、数组\n1. 一维数组  \n1.1 定义一维数组 \n\n```\n数据类型 数组名[填数字或表达式];\n```\n\n1.2\t数组引用  \n\n```\n数组名[下标]\n```\n\n2. 二维数组\n2.1 二维数组定义\n\n```\n类型 数组名[多少行][多少.列];\n```\n\n2.2 二维数组的引用  \n\n```\n数据类型 数组名[行.下标][列.下标]\n```\n\n### 七、字符串处理函数\n```\n1.puts(字符数组)   \n输出字符串函数      \n\n2.gets(字符数组)   \n输入字符串的函数  \n\n3.strcat(字符数组1,字符数组2)          \n字符串连接函数   \n\n4.strcpy(字符数组1,字符数组2)\n字符串复制函数  \n\n5.strcmp(字符串1,字符串2)     \n字符串比较函数  \n\n6.strlen(字符数组)   \n测字符串长度的函数  \n\n7.strlwr(字符串)  \n转换为小写的函数  \n\n8.strupr(字符串)  \n转换为大写的函数  \n```\n\n### 八、函数定义\n1.定义无参函数\n```\n类型名 函数名()\n{\n\t//函数体;\n}\n```\n2.定义有参函数  \n```\n类型名 函数名(形式参数)\n{\n\t//函数体;\n}\n```\n### 九、指针\n1.定义指针变量\n```\n类型名 *指针变量名;\n```\n### 十、指针数组\n数组元素的指针就是数组元素的地址  \n通过指针引用数组的方法如下：  \n```\n*(数组名+数字)\n```\n\n### 十一、动态内存分配\n```\n1、malloc()函数开辟动态存储区\n2、calloc()函数开辟动态存储区\n3、realloc()函数重新分配动态存储区\n4、free()函数释放动态存储区\n```\n\n### 十二、结构体\n1.定义结构体  \n```\nstruct 结构体名\n{\n    成员表列;\n    //类型名 成员名; \n}\n```\n### 十三、共用体类型\n```\nunion 共用体名\n{\n\t成员表列\n}变量表列；\n```\n\n### 十四、枚举类型\n1.枚举类型定义   \n```\nenum[枚举名]{枚举元素列表};\n```\n### typedef声明新类型名\n```\ntypedef int Integer;\n```\n比如这句的意思是用Integer为类型名，作用与int相同  \n### 十五、文件的输入输出\n1.用fopen函数打开数据文件  \n```\nfopen(文件名,使用文件方式);\n```\n2.用fclose函数关闭数据文件  \n```\nfclose(文件指针);\n```\n","slug":"2022-10-28_C语言笔记简化版","published":1,"updated":"2022-11-01T09:01:32.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9y2zqs1000eoy9k7qmi1qth","content":"<h2 id=\"各章节重点\"><a href=\"#各章节重点\" class=\"headerlink\" title=\"各章节重点\"></a>各章节重点</h2><h3 id=\"一、数据类型\"><a href=\"#一、数据类型\" class=\"headerlink\" title=\"一、数据类型\"></a>一、数据类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、int   整型  </span><br><span class=\"line\">2、float 浮点型（小数）  </span><br><span class=\"line\">3、char  字符  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、输入输出\"><a href=\"#二、输入输出\" class=\"headerlink\" title=\"二、输入输出\"></a>二、输入输出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.printf();输出函数    </span><br><span class=\"line\">2.scanf();输入函数    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、选择结构\"><a href=\"#三、选择结构\" class=\"headerlink\" title=\"三、选择结构\"></a>三、选择结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(条件表达式1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//条件1成立执行这里的代码；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else (条件2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//条件2成立执行这里的代码；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//其他情况执行这里代码；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、循环结构\"><a href=\"#四、循环结构\" class=\"headerlink\" title=\"四、循环结构\"></a>四、循环结构</h3><p>循环分为for循环、while循环、do while循环<br>1.for循环  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(循环变量赋初值;循环条件;循环变量增值)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//每次循环要执行的代码放这;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.while循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(条件表达式1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//每次循环要执行的代码放这;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.do while循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//每次循环要执行的代码放这;</span><br><span class=\"line\">&#125;while(条件表达式1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、退出循环语句\"><a href=\"#五、退出循环语句\" class=\"headerlink\" title=\"五、退出循环语句\"></a>五、退出循环语句</h3><p>退出循环分为break; 与 continue  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n\n<p>break;语句用于退出整个循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">continue;</span><br></pre></td></tr></table></figure>\n\n<p>continue用于退出本次循环而不退出整个循环  </p>\n<h3 id=\"六、数组\"><a href=\"#六、数组\" class=\"headerlink\" title=\"六、数组\"></a>六、数组</h3><ol>\n<li>一维数组  </li>\n<li>1 定义一维数组 </li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 数组名[填数字或表达式];</span><br></pre></td></tr></table></figure>\n\n<p>1.2    数组引用  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组名[下标]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>二维数组</li>\n<li>1 二维数组定义</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型 数组名[多少行][多少.列];</span><br></pre></td></tr></table></figure>\n\n<p>2.2 二维数组的引用  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 数组名[行.下标][列.下标]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、字符串处理函数\"><a href=\"#七、字符串处理函数\" class=\"headerlink\" title=\"七、字符串处理函数\"></a>七、字符串处理函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.puts(字符数组)   </span><br><span class=\"line\">输出字符串函数      </span><br><span class=\"line\"></span><br><span class=\"line\">2.gets(字符数组)   </span><br><span class=\"line\">输入字符串的函数  </span><br><span class=\"line\"></span><br><span class=\"line\">3.strcat(字符数组1,字符数组2)          </span><br><span class=\"line\">字符串连接函数   </span><br><span class=\"line\"></span><br><span class=\"line\">4.strcpy(字符数组1,字符数组2)</span><br><span class=\"line\">字符串复制函数  </span><br><span class=\"line\"></span><br><span class=\"line\">5.strcmp(字符串1,字符串2)     </span><br><span class=\"line\">字符串比较函数  </span><br><span class=\"line\"></span><br><span class=\"line\">6.strlen(字符数组)   </span><br><span class=\"line\">测字符串长度的函数  </span><br><span class=\"line\"></span><br><span class=\"line\">7.strlwr(字符串)  </span><br><span class=\"line\">转换为小写的函数  </span><br><span class=\"line\"></span><br><span class=\"line\">8.strupr(字符串)  </span><br><span class=\"line\">转换为大写的函数  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"八、函数定义\"><a href=\"#八、函数定义\" class=\"headerlink\" title=\"八、函数定义\"></a>八、函数定义</h3><p>1.定义无参函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 函数名()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//函数体;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.定义有参函数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 函数名(形式参数)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//函数体;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"九、指针\"><a href=\"#九、指针\" class=\"headerlink\" title=\"九、指针\"></a>九、指针</h3><p>1.定义指针变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 *指针变量名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十、指针数组\"><a href=\"#十、指针数组\" class=\"headerlink\" title=\"十、指针数组\"></a>十、指针数组</h3><p>数组元素的指针就是数组元素的地址<br>通过指针引用数组的方法如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*(数组名+数字)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十一、动态内存分配\"><a href=\"#十一、动态内存分配\" class=\"headerlink\" title=\"十一、动态内存分配\"></a>十一、动态内存分配</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、malloc()函数开辟动态存储区</span><br><span class=\"line\">2、calloc()函数开辟动态存储区</span><br><span class=\"line\">3、realloc()函数重新分配动态存储区</span><br><span class=\"line\">4、free()函数释放动态存储区</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十二、结构体\"><a href=\"#十二、结构体\" class=\"headerlink\" title=\"十二、结构体\"></a>十二、结构体</h3><p>1.定义结构体  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct 结构体名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    成员表列;</span><br><span class=\"line\">    //类型名 成员名; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十三、共用体类型\"><a href=\"#十三、共用体类型\" class=\"headerlink\" title=\"十三、共用体类型\"></a>十三、共用体类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union 共用体名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t成员表列</span><br><span class=\"line\">&#125;变量表列；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十四、枚举类型\"><a href=\"#十四、枚举类型\" class=\"headerlink\" title=\"十四、枚举类型\"></a>十四、枚举类型</h3><p>1.枚举类型定义   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum[枚举名]&#123;枚举元素列表&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"typedef声明新类型名\"><a href=\"#typedef声明新类型名\" class=\"headerlink\" title=\"typedef声明新类型名\"></a>typedef声明新类型名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef int Integer;</span><br></pre></td></tr></table></figure>\n<p>比如这句的意思是用Integer为类型名，作用与int相同  </p>\n<h3 id=\"十五、文件的输入输出\"><a href=\"#十五、文件的输入输出\" class=\"headerlink\" title=\"十五、文件的输入输出\"></a>十五、文件的输入输出</h3><p>1.用fopen函数打开数据文件  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fopen(文件名,使用文件方式);</span><br></pre></td></tr></table></figure>\n<p>2.用fclose函数关闭数据文件  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fclose(文件指针);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，这是一个全新的主题，之前React+Next主题太花哨换了个简约的主题。感谢hexo上提供的stellar开源主题。\n"}}}},"excerpt":"","more":"<h2 id=\"各章节重点\"><a href=\"#各章节重点\" class=\"headerlink\" title=\"各章节重点\"></a>各章节重点</h2><h3 id=\"一、数据类型\"><a href=\"#一、数据类型\" class=\"headerlink\" title=\"一、数据类型\"></a>一、数据类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、int   整型  </span><br><span class=\"line\">2、float 浮点型（小数）  </span><br><span class=\"line\">3、char  字符  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、输入输出\"><a href=\"#二、输入输出\" class=\"headerlink\" title=\"二、输入输出\"></a>二、输入输出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.printf();输出函数    </span><br><span class=\"line\">2.scanf();输入函数    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、选择结构\"><a href=\"#三、选择结构\" class=\"headerlink\" title=\"三、选择结构\"></a>三、选择结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(条件表达式1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//条件1成立执行这里的代码；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else (条件2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//条件2成立执行这里的代码；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//其他情况执行这里代码；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、循环结构\"><a href=\"#四、循环结构\" class=\"headerlink\" title=\"四、循环结构\"></a>四、循环结构</h3><p>循环分为for循环、while循环、do while循环<br>1.for循环  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(循环变量赋初值;循环条件;循环变量增值)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//每次循环要执行的代码放这;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.while循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(条件表达式1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//每次循环要执行的代码放这;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.do while循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//每次循环要执行的代码放这;</span><br><span class=\"line\">&#125;while(条件表达式1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、退出循环语句\"><a href=\"#五、退出循环语句\" class=\"headerlink\" title=\"五、退出循环语句\"></a>五、退出循环语句</h3><p>退出循环分为break; 与 continue  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n\n<p>break;语句用于退出整个循环</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">continue;</span><br></pre></td></tr></table></figure>\n\n<p>continue用于退出本次循环而不退出整个循环  </p>\n<h3 id=\"六、数组\"><a href=\"#六、数组\" class=\"headerlink\" title=\"六、数组\"></a>六、数组</h3><ol>\n<li>一维数组  </li>\n<li>1 定义一维数组 </li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 数组名[填数字或表达式];</span><br></pre></td></tr></table></figure>\n\n<p>1.2    数组引用  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组名[下标]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>二维数组</li>\n<li>1 二维数组定义</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型 数组名[多少行][多少.列];</span><br></pre></td></tr></table></figure>\n\n<p>2.2 二维数组的引用  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型 数组名[行.下标][列.下标]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、字符串处理函数\"><a href=\"#七、字符串处理函数\" class=\"headerlink\" title=\"七、字符串处理函数\"></a>七、字符串处理函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.puts(字符数组)   </span><br><span class=\"line\">输出字符串函数      </span><br><span class=\"line\"></span><br><span class=\"line\">2.gets(字符数组)   </span><br><span class=\"line\">输入字符串的函数  </span><br><span class=\"line\"></span><br><span class=\"line\">3.strcat(字符数组1,字符数组2)          </span><br><span class=\"line\">字符串连接函数   </span><br><span class=\"line\"></span><br><span class=\"line\">4.strcpy(字符数组1,字符数组2)</span><br><span class=\"line\">字符串复制函数  </span><br><span class=\"line\"></span><br><span class=\"line\">5.strcmp(字符串1,字符串2)     </span><br><span class=\"line\">字符串比较函数  </span><br><span class=\"line\"></span><br><span class=\"line\">6.strlen(字符数组)   </span><br><span class=\"line\">测字符串长度的函数  </span><br><span class=\"line\"></span><br><span class=\"line\">7.strlwr(字符串)  </span><br><span class=\"line\">转换为小写的函数  </span><br><span class=\"line\"></span><br><span class=\"line\">8.strupr(字符串)  </span><br><span class=\"line\">转换为大写的函数  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"八、函数定义\"><a href=\"#八、函数定义\" class=\"headerlink\" title=\"八、函数定义\"></a>八、函数定义</h3><p>1.定义无参函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 函数名()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//函数体;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.定义有参函数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 函数名(形式参数)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//函数体;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"九、指针\"><a href=\"#九、指针\" class=\"headerlink\" title=\"九、指针\"></a>九、指针</h3><p>1.定义指针变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名 *指针变量名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十、指针数组\"><a href=\"#十、指针数组\" class=\"headerlink\" title=\"十、指针数组\"></a>十、指针数组</h3><p>数组元素的指针就是数组元素的地址<br>通过指针引用数组的方法如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*(数组名+数字)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十一、动态内存分配\"><a href=\"#十一、动态内存分配\" class=\"headerlink\" title=\"十一、动态内存分配\"></a>十一、动态内存分配</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、malloc()函数开辟动态存储区</span><br><span class=\"line\">2、calloc()函数开辟动态存储区</span><br><span class=\"line\">3、realloc()函数重新分配动态存储区</span><br><span class=\"line\">4、free()函数释放动态存储区</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十二、结构体\"><a href=\"#十二、结构体\" class=\"headerlink\" title=\"十二、结构体\"></a>十二、结构体</h3><p>1.定义结构体  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct 结构体名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    成员表列;</span><br><span class=\"line\">    //类型名 成员名; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十三、共用体类型\"><a href=\"#十三、共用体类型\" class=\"headerlink\" title=\"十三、共用体类型\"></a>十三、共用体类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union 共用体名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t成员表列</span><br><span class=\"line\">&#125;变量表列；</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十四、枚举类型\"><a href=\"#十四、枚举类型\" class=\"headerlink\" title=\"十四、枚举类型\"></a>十四、枚举类型</h3><p>1.枚举类型定义   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum[枚举名]&#123;枚举元素列表&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"typedef声明新类型名\"><a href=\"#typedef声明新类型名\" class=\"headerlink\" title=\"typedef声明新类型名\"></a>typedef声明新类型名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef int Integer;</span><br></pre></td></tr></table></figure>\n<p>比如这句的意思是用Integer为类型名，作用与int相同  </p>\n<h3 id=\"十五、文件的输入输出\"><a href=\"#十五、文件的输入输出\" class=\"headerlink\" title=\"十五、文件的输入输出\"></a>十五、文件的输入输出</h3><p>1.用fopen函数打开数据文件  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fopen(文件名,使用文件方式);</span><br></pre></td></tr></table></figure>\n<p>2.用fclose函数关闭数据文件  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fclose(文件指针);</span><br></pre></td></tr></table></figure>\n"},{"title":"Hexo-Linux搭建博客","date":"2022-09-15T13:07:32.000Z","_content":"\n## Hexo简介\n\nHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看  \n\n## 安装Git\n\nGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理  \n\n```\napt-get install git -y\n```\n\n## 安装nodejs\n\nHexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具\n\n```\napt-get install nodejs npm -y\n```\n安装完后，输入命令\n\n```\nnode -v\n```\n```\nnpm -v\n```\n检查是否安装成功\n\n更换npm源为淘宝源\n\n```\nnpm config set registry https://registry.npm.taobao.org  \n```\n## 安装hexo\n\n前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹filename，然后cd到这个文件夹下\n\n输入命令\n\n```\nnpm install -g hexo-cli\n```\n输入命令\n\n```\nhexo -v\n```\n查看版本信息\n\n\n初始化hexo\n\n```\nhexo init filename(文件名随意定义)\n```\n```\ncd filename //进入这个文件夹\n```\n```\nnpm install\n```\ncd <folder> #说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为hexo,~/root/hexo以下将使用这个文件夹）\nhexo init #说明：自动在文件夹（hexo1）中创建项目所需的文件\nnpm install #说明：安装依赖包\nhexo generate #说明：构建，会在hexo1中创建public文件夹\n执行完以上命令后，会多出以下文件和文件夹\n例如\n\n\n新建完成后，指定文件夹目录下有：\n\n_config.yml：站点的配置文件，需要备份\nthemes：主题文件夹，需要备份\nsource：博客文章的 .md 文件，需要备份\nscaffolds：文章的模板，需要备份\npackage.json：安装包的名称，需要备份\n.gitignore：限定在 push 时哪些文件可以忽略，需要备份\n.git：主题和站点都有，标志这是一个 git 项目，不需要备份\nnode_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份\npublic：是 hexo g 生成的静态网页，不需要备份\n.deploy_git：同上，hexo g 也会生成，不需要备份\ndb.json：文件，不需要备份\n\n输入命令\n\n```\nhexo g\n```\n\n输入命令\n\n```\nhexo s\n```\n\n打开hexo的服务\n\n在浏览器输入\n\nhttp://localhost:4000\n\n就可以看到你生成的博客\n\n\n使用ctrl+c停止服务\n\nHexo+Github\n\nGitHub创建个人仓库\n\n注册登录github官网，点击右上角加号，点击New repository，新建仓库\n\n\n创建一个和用户名相同的仓库,即http://xxxx.github.io，其中xxx是github的用户名\n\n\n点击create repository\n\nGit初始化设置\n\n输入命令\n\n```\ngit config --global user.name \"yourname\"   \ngit config --global user.email \"youremail\"  \n(yourname是github用户名，youremail是注册github的邮箱)  \ngit config user.name\ngit config user.email\n```\n检查是否正确，输入命令\n\n生成SSH添加到GitHub\n\n输入命令，创建SSH,一路回车\n\nwp-block-code\nssh-keygen -t rsa -C \"youremail\"\n\n查看SSH KEY，输入命令\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n复制id_rsa.pub里面的全部内容\n\n\n在github的setting中，找到SSH keys的设置选项，点击New SSH key，粘贴id_rsa.pub里面的全部内容\n\n\n输入命令\n\n```\nssh -T git@github.com\n```\n查看是否连接成功\n\n\n打开站点配置文件 _config.yml，修改添加以下内容\n\n```\ndeploy:\n  type: git\n  repo:\ngit@github.com:yourgithubname/yourgithubname.github.io.git  \n  branch: master\n```\n安装deploy-git ，也就是部署的命令,这样才能用命令部署到github\n\n```\nnpm install hexo-deployer-git --save\n```\n输入命令\n```\nhexo clean 第一次安装不用清缓存\n\nhexo clean &&　hexo g -d 　缩写\n\nhexo g = hexo generate 生成静态文件\n\nhexo generate -deploy 生成静态文件后立即部署网站  \n```\n打开下面的网址\n\nhttp://yourname.github.io\n\n就可看到和\n\nhttp://localhost:4000\n\n一样的了！\n\n关联Git仓库\n\n```\ngit clone https://github.com/你的用户名/你的用户名.github.io.git  \n```\n执行之后会在当前目录生成'你的用户名.github.io'的文件夹，这是关联github仓库的文件夹，需要上传的文件都会移动到这里\n\n更多精彩内容请点击hexo官网\n\n(附上我的博客链接)\n\nHexo+Gitee\n\nGitee创建个人仓库\n\n打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库\n\n\n\n开启 Gitee Pages\n\n\n\n点击启动\n\n\n启动后，点击蓝色链接打开网址\n\n初始化Git设置\n\n输入命令\n\n```\ngit config --global user.name \"这里输入你的Gitee注册名\"// 按回车  \ngit config --global user.email \"这里输你的Gitee邮箱\"  \n```\n生成SSH密钥文件\n\n```\nssh-keygen -t rsa -C \"你的Gitee注册邮箱\"  \n// 可不输入，三个回车\n```\n复制粘贴到码云\n\n\n\n配置 _config.yml\n\n\n点击复制克隆/下载里面的https的内容\n\n修改添加_config.yml以下内容\n\n```\nurl: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名(粘贴)  \nroot: /仓库名/\nwp-block-code\ndeploy:\n  type: git\n  repo: https://gitee.com/空间名/仓库名(粘贴)  \n  branch: master\n```\n基础配置可以参考官方文档的配置说明\n\n```\nhexo clean &&　hexo g -d 　缩写 清缓存\n\nhexo g = hexo generate 生成静态文件\n\nhexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee  \n打开Gitee Pages 服务 ，每次上传或改动，都要点击“更新”打开网址访问  \n```\n","source":"_posts/2022-09-15_Hexo-Linux搭建博客.md","raw":"---\ntitle: Hexo-Linux搭建博客\ndate: 2022-09-15 21:07:32\n---\n\n## Hexo简介\n\nHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看  \n\n## 安装Git\n\nGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理  \n\n```\napt-get install git -y\n```\n\n## 安装nodejs\n\nHexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具\n\n```\napt-get install nodejs npm -y\n```\n安装完后，输入命令\n\n```\nnode -v\n```\n```\nnpm -v\n```\n检查是否安装成功\n\n更换npm源为淘宝源\n\n```\nnpm config set registry https://registry.npm.taobao.org  \n```\n## 安装hexo\n\n前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹filename，然后cd到这个文件夹下\n\n输入命令\n\n```\nnpm install -g hexo-cli\n```\n输入命令\n\n```\nhexo -v\n```\n查看版本信息\n\n\n初始化hexo\n\n```\nhexo init filename(文件名随意定义)\n```\n```\ncd filename //进入这个文件夹\n```\n```\nnpm install\n```\ncd <folder> #说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为hexo,~/root/hexo以下将使用这个文件夹）\nhexo init #说明：自动在文件夹（hexo1）中创建项目所需的文件\nnpm install #说明：安装依赖包\nhexo generate #说明：构建，会在hexo1中创建public文件夹\n执行完以上命令后，会多出以下文件和文件夹\n例如\n\n\n新建完成后，指定文件夹目录下有：\n\n_config.yml：站点的配置文件，需要备份\nthemes：主题文件夹，需要备份\nsource：博客文章的 .md 文件，需要备份\nscaffolds：文章的模板，需要备份\npackage.json：安装包的名称，需要备份\n.gitignore：限定在 push 时哪些文件可以忽略，需要备份\n.git：主题和站点都有，标志这是一个 git 项目，不需要备份\nnode_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份\npublic：是 hexo g 生成的静态网页，不需要备份\n.deploy_git：同上，hexo g 也会生成，不需要备份\ndb.json：文件，不需要备份\n\n输入命令\n\n```\nhexo g\n```\n\n输入命令\n\n```\nhexo s\n```\n\n打开hexo的服务\n\n在浏览器输入\n\nhttp://localhost:4000\n\n就可以看到你生成的博客\n\n\n使用ctrl+c停止服务\n\nHexo+Github\n\nGitHub创建个人仓库\n\n注册登录github官网，点击右上角加号，点击New repository，新建仓库\n\n\n创建一个和用户名相同的仓库,即http://xxxx.github.io，其中xxx是github的用户名\n\n\n点击create repository\n\nGit初始化设置\n\n输入命令\n\n```\ngit config --global user.name \"yourname\"   \ngit config --global user.email \"youremail\"  \n(yourname是github用户名，youremail是注册github的邮箱)  \ngit config user.name\ngit config user.email\n```\n检查是否正确，输入命令\n\n生成SSH添加到GitHub\n\n输入命令，创建SSH,一路回车\n\nwp-block-code\nssh-keygen -t rsa -C \"youremail\"\n\n查看SSH KEY，输入命令\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n复制id_rsa.pub里面的全部内容\n\n\n在github的setting中，找到SSH keys的设置选项，点击New SSH key，粘贴id_rsa.pub里面的全部内容\n\n\n输入命令\n\n```\nssh -T git@github.com\n```\n查看是否连接成功\n\n\n打开站点配置文件 _config.yml，修改添加以下内容\n\n```\ndeploy:\n  type: git\n  repo:\ngit@github.com:yourgithubname/yourgithubname.github.io.git  \n  branch: master\n```\n安装deploy-git ，也就是部署的命令,这样才能用命令部署到github\n\n```\nnpm install hexo-deployer-git --save\n```\n输入命令\n```\nhexo clean 第一次安装不用清缓存\n\nhexo clean &&　hexo g -d 　缩写\n\nhexo g = hexo generate 生成静态文件\n\nhexo generate -deploy 生成静态文件后立即部署网站  \n```\n打开下面的网址\n\nhttp://yourname.github.io\n\n就可看到和\n\nhttp://localhost:4000\n\n一样的了！\n\n关联Git仓库\n\n```\ngit clone https://github.com/你的用户名/你的用户名.github.io.git  \n```\n执行之后会在当前目录生成'你的用户名.github.io'的文件夹，这是关联github仓库的文件夹，需要上传的文件都会移动到这里\n\n更多精彩内容请点击hexo官网\n\n(附上我的博客链接)\n\nHexo+Gitee\n\nGitee创建个人仓库\n\n打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库\n\n\n\n开启 Gitee Pages\n\n\n\n点击启动\n\n\n启动后，点击蓝色链接打开网址\n\n初始化Git设置\n\n输入命令\n\n```\ngit config --global user.name \"这里输入你的Gitee注册名\"// 按回车  \ngit config --global user.email \"这里输你的Gitee邮箱\"  \n```\n生成SSH密钥文件\n\n```\nssh-keygen -t rsa -C \"你的Gitee注册邮箱\"  \n// 可不输入，三个回车\n```\n复制粘贴到码云\n\n\n\n配置 _config.yml\n\n\n点击复制克隆/下载里面的https的内容\n\n修改添加_config.yml以下内容\n\n```\nurl: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名(粘贴)  \nroot: /仓库名/\nwp-block-code\ndeploy:\n  type: git\n  repo: https://gitee.com/空间名/仓库名(粘贴)  \n  branch: master\n```\n基础配置可以参考官方文档的配置说明\n\n```\nhexo clean &&　hexo g -d 　缩写 清缓存\n\nhexo g = hexo generate 生成静态文件\n\nhexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee  \n打开Gitee Pages 服务 ，每次上传或改动，都要点击“更新”打开网址访问  \n```\n","slug":"2022-09-15_Hexo-Linux搭建博客","published":1,"updated":"2022-10-28T10:56:44.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9y3c58x0000x39keymqd6bc","content":"<h2 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看  </p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install git -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install nodejs npm -y</span><br></pre></td></tr></table></figure>\n<p>安装完后，输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>检查是否安装成功</p>\n<p>更换npm源为淘宝源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org  </span><br></pre></td></tr></table></figure>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹filename，然后cd到这个文件夹下</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<p>查看版本信息</p>\n<p>初始化hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init filename(文件名随意定义)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd filename //进入这个文件夹</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>cd <folder> #说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为hexo,~/root/hexo以下将使用这个文件夹）<br>hexo init #说明：自动在文件夹（hexo1）中创建项目所需的文件<br>npm install #说明：安装依赖包<br>hexo generate #说明：构建，会在hexo1中创建public文件夹<br>执行完以上命令后，会多出以下文件和文件夹<br>例如</p>\n<p>新建完成后，指定文件夹目录下有：</p>\n<p>_config.yml：站点的配置文件，需要备份<br>themes：主题文件夹，需要备份<br>source：博客文章的 .md 文件，需要备份<br>scaffolds：文章的模板，需要备份<br>package.json：安装包的名称，需要备份<br>.gitignore：限定在 push 时哪些文件可以忽略，需要备份<br>.git：主题和站点都有，标志这是一个 git 项目，不需要备份<br>node_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份<br>public：是 hexo g 生成的静态网页，不需要备份<br>.deploy_git：同上，hexo g 也会生成，不需要备份<br>db.json：文件，不需要备份</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>打开hexo的服务</p>\n<p>在浏览器输入</p>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n<p>就可以看到你生成的博客</p>\n<p>使用ctrl+c停止服务</p>\n<p>Hexo+Github</p>\n<p>GitHub创建个人仓库</p>\n<p>注册登录github官网，点击右上角加号，点击New repository，新建仓库</p>\n<p>创建一个和用户名相同的仓库,即<a href=\"http://xxxx.github.io,其中xxx是github的用户名/\">http://xxxx.github.io，其中xxx是github的用户名</a></p>\n<p>点击create repository</p>\n<p>Git初始化设置</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;   </span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;  </span><br><span class=\"line\">(yourname是github用户名，youremail是注册github的邮箱)  </span><br><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<p>检查是否正确，输入命令</p>\n<p>生成SSH添加到GitHub</p>\n<p>输入命令，创建SSH,一路回车</p>\n<p>wp-block-code<br>ssh-keygen -t rsa -C “youremail”</p>\n<p>查看SSH KEY，输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>复制id_rsa.pub里面的全部内容</p>\n<p>在github的setting中，找到SSH keys的设置选项，点击New SSH key，粘贴id_rsa.pub里面的全部内容</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>查看是否连接成功</p>\n<p>打开站点配置文件 _config.yml，修改添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">git@github.com:yourgithubname/yourgithubname.github.io.git  </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>安装deploy-git ，也就是部署的命令,这样才能用命令部署到github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean 第一次安装不用清缓存</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean &amp;&amp;　hexo g -d 　缩写</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g = hexo generate 生成静态文件</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate -deploy 生成静态文件后立即部署网站  </span><br></pre></td></tr></table></figure>\n<p>打开下面的网址</p>\n<p><a href=\"http://yourname.github.io/\">http://yourname.github.io</a></p>\n<p>就可看到和</p>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n<p>一样的了！</p>\n<p>关联Git仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/你的用户名/你的用户名.github.io.git  </span><br></pre></td></tr></table></figure>\n<p>执行之后会在当前目录生成’你的用户名.github.io’的文件夹，这是关联github仓库的文件夹，需要上传的文件都会移动到这里</p>\n<p>更多精彩内容请点击hexo官网</p>\n<p>(附上我的博客链接)</p>\n<p>Hexo+Gitee</p>\n<p>Gitee创建个人仓库</p>\n<p>打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库</p>\n<p>开启 Gitee Pages</p>\n<p>点击启动</p>\n<p>启动后，点击蓝色链接打开网址</p>\n<p>初始化Git设置</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;这里输入你的Gitee注册名&quot;// 按回车  </span><br><span class=\"line\">git config --global user.email &quot;这里输你的Gitee邮箱&quot;  </span><br></pre></td></tr></table></figure>\n<p>生成SSH密钥文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的Gitee注册邮箱&quot;  </span><br><span class=\"line\">// 可不输入，三个回车</span><br></pre></td></tr></table></figure>\n<p>复制粘贴到码云</p>\n<p>配置 _config.yml</p>\n<p>点击复制克隆/下载里面的https的内容</p>\n<p>修改添加_config.yml以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名(粘贴)  </span><br><span class=\"line\">root: /仓库名/</span><br><span class=\"line\">wp-block-code</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://gitee.com/空间名/仓库名(粘贴)  </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>基础配置可以参考官方文档的配置说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp;　hexo g -d 　缩写 清缓存</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g = hexo generate 生成静态文件</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee  </span><br><span class=\"line\">打开Gitee Pages 服务 ，每次上传或改动，都要点击“更新”打开网址访问  </span><br></pre></td></tr></table></figure>\n","site":{"data":{"widgets":{"recent":{"layout":"recent","rss":null,"limit":5},"welcome":{"layout":"markdown","title":"欢迎","content":"欢迎光临小站，采用Hexo开源主题Stellar，刚使用不仅，有些功能还在研究中，敬请期待......\n"}}}},"excerpt":"","more":"<h2 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看  </p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install git -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install nodejs npm -y</span><br></pre></td></tr></table></figure>\n<p>安装完后，输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>检查是否安装成功</p>\n<p>更换npm源为淘宝源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org  </span><br></pre></td></tr></table></figure>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹filename，然后cd到这个文件夹下</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<p>查看版本信息</p>\n<p>初始化hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init filename(文件名随意定义)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd filename //进入这个文件夹</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>cd <folder> #说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为hexo,~/root/hexo以下将使用这个文件夹）<br>hexo init #说明：自动在文件夹（hexo1）中创建项目所需的文件<br>npm install #说明：安装依赖包<br>hexo generate #说明：构建，会在hexo1中创建public文件夹<br>执行完以上命令后，会多出以下文件和文件夹<br>例如</p>\n<p>新建完成后，指定文件夹目录下有：</p>\n<p>_config.yml：站点的配置文件，需要备份<br>themes：主题文件夹，需要备份<br>source：博客文章的 .md 文件，需要备份<br>scaffolds：文章的模板，需要备份<br>package.json：安装包的名称，需要备份<br>.gitignore：限定在 push 时哪些文件可以忽略，需要备份<br>.git：主题和站点都有，标志这是一个 git 项目，不需要备份<br>node_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份<br>public：是 hexo g 生成的静态网页，不需要备份<br>.deploy_git：同上，hexo g 也会生成，不需要备份<br>db.json：文件，不需要备份</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>打开hexo的服务</p>\n<p>在浏览器输入</p>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n<p>就可以看到你生成的博客</p>\n<p>使用ctrl+c停止服务</p>\n<p>Hexo+Github</p>\n<p>GitHub创建个人仓库</p>\n<p>注册登录github官网，点击右上角加号，点击New repository，新建仓库</p>\n<p>创建一个和用户名相同的仓库,即<a href=\"http://xxxx.github.io,其中xxx是github的用户名/\">http://xxxx.github.io，其中xxx是github的用户名</a></p>\n<p>点击create repository</p>\n<p>Git初始化设置</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;   </span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;  </span><br><span class=\"line\">(yourname是github用户名，youremail是注册github的邮箱)  </span><br><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<p>检查是否正确，输入命令</p>\n<p>生成SSH添加到GitHub</p>\n<p>输入命令，创建SSH,一路回车</p>\n<p>wp-block-code<br>ssh-keygen -t rsa -C “youremail”</p>\n<p>查看SSH KEY，输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>复制id_rsa.pub里面的全部内容</p>\n<p>在github的setting中，找到SSH keys的设置选项，点击New SSH key，粘贴id_rsa.pub里面的全部内容</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>查看是否连接成功</p>\n<p>打开站点配置文件 _config.yml，修改添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">git@github.com:yourgithubname/yourgithubname.github.io.git  </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>安装deploy-git ，也就是部署的命令,这样才能用命令部署到github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean 第一次安装不用清缓存</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean &amp;&amp;　hexo g -d 　缩写</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g = hexo generate 生成静态文件</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate -deploy 生成静态文件后立即部署网站  </span><br></pre></td></tr></table></figure>\n<p>打开下面的网址</p>\n<p><a href=\"http://yourname.github.io/\">http://yourname.github.io</a></p>\n<p>就可看到和</p>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n<p>一样的了！</p>\n<p>关联Git仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/你的用户名/你的用户名.github.io.git  </span><br></pre></td></tr></table></figure>\n<p>执行之后会在当前目录生成’你的用户名.github.io’的文件夹，这是关联github仓库的文件夹，需要上传的文件都会移动到这里</p>\n<p>更多精彩内容请点击hexo官网</p>\n<p>(附上我的博客链接)</p>\n<p>Hexo+Gitee</p>\n<p>Gitee创建个人仓库</p>\n<p>打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库</p>\n<p>开启 Gitee Pages</p>\n<p>点击启动</p>\n<p>启动后，点击蓝色链接打开网址</p>\n<p>初始化Git设置</p>\n<p>输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;这里输入你的Gitee注册名&quot;// 按回车  </span><br><span class=\"line\">git config --global user.email &quot;这里输你的Gitee邮箱&quot;  </span><br></pre></td></tr></table></figure>\n<p>生成SSH密钥文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的Gitee注册邮箱&quot;  </span><br><span class=\"line\">// 可不输入，三个回车</span><br></pre></td></tr></table></figure>\n<p>复制粘贴到码云</p>\n<p>配置 _config.yml</p>\n<p>点击复制克隆/下载里面的https的内容</p>\n<p>修改添加_config.yml以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名(粘贴)  </span><br><span class=\"line\">root: /仓库名/</span><br><span class=\"line\">wp-block-code</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://gitee.com/空间名/仓库名(粘贴)  </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>基础配置可以参考官方文档的配置说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp;　hexo g -d 　缩写 清缓存</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g = hexo generate 生成静态文件</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee  </span><br><span class=\"line\">打开Gitee Pages 服务 ，每次上传或改动，都要点击“更新”打开网址访问  </span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl9y2zqs1000eoy9k7qmi1qth","tag_id":"cl9y2zqs0000boy9k14fzbr5y","_id":"cl9y2zqs3000hoy9k2449gnjv"},{"post_id":"cl9y2zqrv0003oy9k4bwucyol","tag_id":"cl9y2zqs0000boy9k14fzbr5y","_id":"cl9y2zqs3000ioy9k8fduedun"},{"post_id":"cl9y2zqry0006oy9kavoz8pxd","tag_id":"cl9y2zqs3000goy9ka9j7fgae","_id":"cl9y2zqs5000koy9kegotfolm"},{"post_id":"cl9y2zqrz0008oy9kapzp3ebu","tag_id":"cl9y2zqs3000goy9ka9j7fgae","_id":"cl9y2zqs5000moy9k3oep1y7f"},{"post_id":"cl9y2zqs0000aoy9kh16j9uqr","tag_id":"cl9y2zqs0000boy9k14fzbr5y","_id":"cl9y2zqs5000noy9khxnv267w"}],"Tag":[{"name":"记录","_id":"cl9y2zqrw0004oy9kbz7vhlvu"},{"name":"C","_id":"cl9y2zqs0000boy9k14fzbr5y"},{"name":"Linux","_id":"cl9y2zqs3000goy9ka9j7fgae"}]}}